Revert changes in coders/ps and coders/pdf

Old ghostscript 8.7 produce warnings which are
considered (by new code) as errors and raise an exception.

See http://forums.famillecollet.com/viewtopic.php?id=2898
See http://forums.famillecollet.com/viewtopic.php?id=2914

--- ImageMagick-6.8.9-7/coders/ps.c	2014-07-23 21:21:54.000000000 +0200
+++ ImageMagick-6.8.9-0/coders/ps.c	2014-03-06 15:10:04.000000000 +0100
@@ -115,31 +115,6 @@
 %    o exception: return any errors or warnings in this structure.
 %
 */
-#if defined(MAGICKCORE_GS_DELEGATE) || defined(MAGICKCORE_WINDOWS_SUPPORT)
-static int MagickDLLCall PostscriptDelegateMessage(void *handle,
-  const char *msg,int len)
-{
-  char
-    **messages;
-
-  size_t offset;
-
-  offset=0;
-  messages=(char **)handle;
-  if (*messages == (char *) NULL)
-    *messages=(char *) AcquireQuantumMemory(len+1,sizeof(char *));
-  else
-    {
-      offset=strlen(*messages);
-      *messages=(char *) ResizeQuantumMemory(*messages,offset+len+1,
-        sizeof(char *));
-    }
-  (void) memcpy(*messages+offset,msg,len);
-  (*messages)[offset+len] ='\0';
-  return(len);
-}
-#endif
-
 static MagickBooleanType InvokePostscriptDelegate(
   const MagickBooleanType verbose,const char *command,ExceptionInfo *exception)
 {
@@ -147,37 +122,8 @@
     status;
 
 #if defined(MAGICKCORE_GS_DELEGATE) || defined(MAGICKCORE_WINDOWS_SUPPORT)
-#define SetArgsStart \
-  if (args_start == (const char *) NULL) \
-    { \
-      if (command[0] != '"') \
-        args_start=strchr(command,' '); \
-      else \
-        { \
-          args_start=strchr(command+1,'"'); \
-          if (args_start != (const char *) NULL) \
-            args_start++; \
-        } \
-    }
-
-#define ExecuteGhostscriptCommand \
-  { \
-    status=SystemCommand(MagickFalse,verbose,command,exception); \
-    if (status == 0) \
-      return(MagickTrue); \
-    if (status < 0) \
-      return(MagickFalse); \
-    (void) ThrowMagickException(exception,GetMagickModule(),DelegateError, \
-      "FailedToExecuteCommand","`%s' (%d)",command,status); \
-    return(MagickFalse); \
-  }
-
   char
-    **argv,
-    *errors;
-
-  const char
-    *args_start=NULL;
+    **argv;
 
   const GhostInfo
     *ghost_info;
@@ -199,61 +145,62 @@
     ghost_info_struct;
 
   ghost_info=(&ghost_info_struct);
-  (void) ResetMagickMemory(&ghost_info_struct,0,sizeof(ghost_info_struct));
-  ghost_info_struct.delete_instance=(void (*)(gs_main_instance *))
-    gsapi_delete_instance;
-  ghost_info_struct.exit=(int (*)(gs_main_instance *)) gsapi_exit;
+  (void) ResetMagickMemory(&ghost_info,0,sizeof(ghost_info));
   ghost_info_struct.new_instance=(int (*)(gs_main_instance **,void *))
     gsapi_new_instance;
   ghost_info_struct.init_with_args=(int (*)(gs_main_instance *,int,char **))
     gsapi_init_with_args;
   ghost_info_struct.run_string=(int (*)(gs_main_instance *,const char *,int,
     int *)) gsapi_run_string;
-  ghost_info_struct.set_stdio=(int (*)(gs_main_instance *,int(*)(void *,char *,
-    int),int(*)(void *,const char *,int),int(*)(void *, const char *, int)))
-    gsapi_set_stdio;
+  ghost_info_struct.delete_instance=(void (*)(gs_main_instance *))
+    gsapi_delete_instance;
+  ghost_info_struct.exit=(int (*)(gs_main_instance *)) gsapi_exit;
 #endif
   if (ghost_info == (GhostInfo *) NULL)
-    ExecuteGhostscriptCommand
+    {
+      status=SystemCommand(MagickFalse,verbose,command,exception);
+      return(status == 0 ? MagickTrue : MagickFalse);
+    }
   if (verbose != MagickFalse)
     {
       (void) fputs("[ghostscript library]",stdout);
-      SetArgsStart
-      (void) fputs(args_start,stdout);
+      (void) fputs(strchr(command,' '),stdout);
     }
-  errors=(char *) NULL;
-  status=(ghost_info->new_instance)(&interpreter,(void *) &errors);
+  status=(ghost_info->new_instance)(&interpreter,(void *) NULL);
   if (status < 0)
-    ExecuteGhostscriptCommand
+    {
+      status=SystemCommand(MagickFalse,verbose,command,exception);
+      return(status == 0 ? MagickTrue : MagickFalse);
+    }
   code=0;
   argv=StringToArgv(command,&argc);
   if (argv == (char **) NULL)
     return(MagickFalse);
-  (void) (ghost_info->set_stdio)(interpreter,(int(MagickDLLCall *)(void *,
-    char *,int)) NULL,PostscriptDelegateMessage,PostscriptDelegateMessage);
   status=(ghost_info->init_with_args)(interpreter,argc-1,argv+1);
   if (status == 0)
     status=(ghost_info->run_string)(interpreter,"systemdict /start get exec\n",
       0,&code);
   (ghost_info->exit)(interpreter);
   (ghost_info->delete_instance)(interpreter);
+#if defined(MAGICKCORE_WINDOWS_SUPPORT)
+  NTGhostscriptUnLoadDLL();
+#endif
   for (i=0; i < (ssize_t) argc; i++)
     argv[i]=DestroyString(argv[i]);
   argv=(char **) RelinquishMagickMemory(argv);
   if ((status != 0) && (status != -101))
     {
-      SetArgsStart
+      char
+        *message;
+
+      message=GetExceptionMessage(errno);
       (void) ThrowMagickException(exception,GetMagickModule(),DelegateError,
-        "PostscriptDelegateFailed","`[ghostscript library]%s': %s",args_start,
-        errors);
-      if (errors != (char *) NULL)
-        errors=DestroyString(errors);
+        "`%s': %s",command,message);
+      message=DestroyString(message);
       (void) LogMagickEvent(CoderEvent,GetMagickModule(),
         "Ghostscript returns status %d, exit code %d",status,code);
       return(MagickFalse);
     }
-  if (errors != (char *) NULL)
-    errors=DestroyString(errors);
   return(MagickTrue);
 #else
   status=SystemCommand(MagickFalse,verbose,command,exception);
@@ -842,7 +789,6 @@
     (void) ConcatenateMagickString(options,"-dEPSCrop ",MaxTextExtent);
   (void) CopyMagickString(filename,read_info->filename,MaxTextExtent);
   (void) AcquireUniqueFilename(filename);
-  (void) RelinquishUniqueFileResource(filename);
   (void) ConcatenateMagickString(filename,"%d",MaxTextExtent);
   (void) FormatLocaleString(command,MaxTextExtent,
     GetDelegateCommands(delegate_info),
@@ -890,6 +836,8 @@
   if (postscript_image == (Image *) NULL)
     {
       image=DestroyImageList(image);
+      ThrowFileException(exception,DelegateError,"PostscriptDelegateFailed",
+        image_info->filename);
       return((Image *) NULL);
     }
   if (LocaleCompare(postscript_image->magick,"BMP") == 0)
--- ImageMagick-6.8.9-7/coders/pdf.c	2014-07-23 21:21:54.000000000 +0200
+++ ImageMagick-6.8.9-0/coders/pdf.c	2014-04-08 09:34:58.000000000 +0200
@@ -125,31 +125,6 @@ static MagickBooleanType
 %    o exception: return any errors or warnings in this structure.
 %
 */
-#if defined(MAGICKCORE_GS_DELEGATE) || defined(MAGICKCORE_WINDOWS_SUPPORT)
-static int MagickDLLCall PDFDelegateMessage(void *handle,const char *msg,
-  int len)
-{
-  char
-    **messages;
-
-  size_t offset;
-
-  offset=0;
-  messages=(char **)handle;
-  if (*messages == (char *) NULL)
-    *messages=(char *) AcquireQuantumMemory(len+1,sizeof(char *));
-  else
-    {
-      offset=strlen(*messages);
-      *messages=(char *) ResizeQuantumMemory(*messages,offset+len+1,
-        sizeof(char *));
-    }
-  (void) memcpy(*messages+offset,msg,len);
-  (*messages)[offset+len] ='\0';
-  return(len);
-}
-#endif
-
 static MagickBooleanType InvokePDFDelegate(const MagickBooleanType verbose,
   const char *command,ExceptionInfo *exception)
 {
@@ -157,37 +132,8 @@ static MagickBooleanType InvokePDFDelega
     status;
 
 #if defined(MAGICKCORE_GS_DELEGATE) || defined(MAGICKCORE_WINDOWS_SUPPORT)
-#define SetArgsStart \
-  if (args_start == (const char *) NULL) \
-    { \
-      if (command[0] != '"') \
-        args_start=strchr(command,' '); \
-      else \
-        { \
-          args_start=strchr(command+1,'"'); \
-          if (args_start != (const char *) NULL) \
-            args_start++; \
-        } \
-    }
-
-#define ExecuteGhostscriptCommand \
-  { \
-    status=SystemCommand(MagickFalse,verbose,command,exception); \
-    if (status == 0) \
-      return(MagickTrue); \
-    if (status < 0) \
-      return(MagickFalse); \
-    (void) ThrowMagickException(exception,GetMagickModule(),DelegateError, \
-      "FailedToExecuteCommand","`%s' (%d)",command,status); \
-    return(MagickFalse); \
-  }
-
   char
-    **argv,
-    *errors;
-
-  const char
-    *args_start=NULL;
+    **argv;
 
   const GhostInfo
     *ghost_info;
@@ -209,61 +155,62 @@ static MagickBooleanType InvokePDFDelega
     ghost_info_struct;
 
   ghost_info=(&ghost_info_struct);
-  (void) ResetMagickMemory(&ghost_info_struct,0,sizeof(ghost_info_struct));
-  ghost_info_struct.delete_instance=(void (*)(gs_main_instance *))
-    gsapi_delete_instance;
-  ghost_info_struct.exit=(int (*)(gs_main_instance *)) gsapi_exit;
+  (void) ResetMagickMemory(&ghost_info,0,sizeof(ghost_info));
   ghost_info_struct.new_instance=(int (*)(gs_main_instance **,void *))
     gsapi_new_instance;
   ghost_info_struct.init_with_args=(int (*)(gs_main_instance *,int,char **))
     gsapi_init_with_args;
   ghost_info_struct.run_string=(int (*)(gs_main_instance *,const char *,int,
     int *)) gsapi_run_string;
-  ghost_info_struct.set_stdio=(int (*)(gs_main_instance *,int(*)(void *,char *,
-    int),int(*)(void *,const char *,int),int(*)(void *, const char *, int)))
-    gsapi_set_stdio;
+  ghost_info_struct.delete_instance=(void (*)(gs_main_instance *))
+    gsapi_delete_instance;
+  ghost_info_struct.exit=(int (*)(gs_main_instance *)) gsapi_exit;
 #endif
   if (ghost_info == (GhostInfo *) NULL)
-    ExecuteGhostscriptCommand
+    {
+      status=SystemCommand(MagickFalse,verbose,command,exception);
+      return(status == 0 ? MagickTrue : MagickFalse);
+    }
   if (verbose != MagickFalse)
     {
       (void) fputs("[ghostscript library]",stdout);
-      SetArgsStart
-      (void) fputs(args_start,stdout);
+      (void) fputs(strchr(command,' '),stdout);
     }
-  errors=(char *) NULL;
-  status=(ghost_info->new_instance)(&interpreter,(void *) &errors);
+  status=(ghost_info->new_instance)(&interpreter,(void *) NULL);
   if (status < 0)
-    ExecuteGhostscriptCommand
+    {
+      status=SystemCommand(MagickFalse,verbose,command,exception);
+      return(status == 0 ? MagickTrue : MagickFalse);
+    }
   code=0;
   argv=StringToArgv(command,&argc);
   if (argv == (char **) NULL)
     return(MagickFalse);
-  (void) (ghost_info->set_stdio)(interpreter,(int(MagickDLLCall *)(void *,
-    char *,int)) NULL,PDFDelegateMessage,PDFDelegateMessage);
   status=(ghost_info->init_with_args)(interpreter,argc-1,argv+1);
   if (status == 0)
     status=(ghost_info->run_string)(interpreter,"systemdict /start get exec\n",
       0,&code);
   (ghost_info->exit)(interpreter);
   (ghost_info->delete_instance)(interpreter);
+#if defined(MAGICKCORE_WINDOWS_SUPPORT)
+  NTGhostscriptUnLoadDLL();
+#endif
   for (i=0; i < (ssize_t) argc; i++)
     argv[i]=DestroyString(argv[i]);
   argv=(char **) RelinquishMagickMemory(argv);
   if ((status != 0) && (status != -101))
     {
-      SetArgsStart
+      char
+        *message;
+
+      message=GetExceptionMessage(errno);
       (void) ThrowMagickException(exception,GetMagickModule(),DelegateError,
-        "PDFDelegateFailed","`[ghostscript library]%s': %s",args_start,
-        errors);
-      if (errors != (char *) NULL)
-        errors=DestroyString(errors);
+        "`%s': %s",command,message);
+      message=DestroyString(message);
       (void) LogMagickEvent(CoderEvent,GetMagickModule(),
         "Ghostscript returns status %d, exit code %d",status,code);
       return(MagickFalse);
     }
-  if (errors != (char *) NULL)
-    errors=DestroyString(errors);
   return(MagickTrue);
 #else
   status=SystemCommand(MagickFalse,verbose,command,exception);
@@ -725,7 +672,6 @@ static Image *ReadPDFImage(const ImageIn
       " -sPDFPassword=%s",read_info->authenticate);
   (void) CopyMagickString(filename,read_info->filename,MaxTextExtent);
   (void) AcquireUniqueFilename(filename);
-  (void) RelinquishUniqueFileResource(filename);
   (void) ConcatenateMagickString(filename,"%d",MaxTextExtent);
   (void) FormatLocaleString(command,MaxTextExtent,
     GetDelegateCommands(delegate_info),
@@ -763,6 +709,8 @@ static Image *ReadPDFImage(const ImageIn
   read_info=DestroyImageInfo(read_info);
   if (pdf_image == (Image *) NULL)
     {
+      ThrowFileException(exception,DelegateError,"PostscriptDelegateFailed",
+        image_info->filename);
       image=DestroyImage(image);
       return((Image *) NULL);
     }

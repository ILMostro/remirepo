Extension [ <persistent> extension #78 apc version 5.1.3 ] {

  - Dependencies {
    Dependency [ apcu (Required) ]
  }

  - Functions {
    Function [ <internal:apc> function apc_cache_info ] {

      - Parameters [2] {
        Parameter #0 [ <optional> $type ]
        Parameter #1 [ <optional> $limited ]
      }
    }
    Function [ <internal:apc> function apc_clear_cache ] {

      - Parameters [1] {
        Parameter #0 [ <optional> $type ]
      }
    }
    Function [ <internal:apc> function apc_store ] {

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <required> $var ]
        Parameter #2 [ <optional> $ttl ]
      }
    }
    Function [ <internal:apc> function apc_fetch ] {

      - Parameters [2] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> &$success ]
      }
    }
    Function [ <internal:apc> function apc_enabled ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:apc> function apc_delete ] {

      - Parameters [1] {
        Parameter #0 [ <required> $keys ]
      }
    }
    Function [ <internal:apc> function apc_add ] {

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <required> $var ]
        Parameter #2 [ <optional> $ttl ]
      }
    }
    Function [ <internal:apc> function apc_sma_info ] {

      - Parameters [1] {
        Parameter #0 [ <optional> $limited ]
      }
    }
    Function [ <internal:apc> function apc_inc ] {

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $step ]
        Parameter #2 [ <optional> &$success ]
      }
    }
    Function [ <internal:apc> function apc_dec ] {

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $step ]
        Parameter #2 [ <optional> &$success ]
      }
    }
    Function [ <internal:apc> function apc_cas ] {

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <required> $old ]
        Parameter #2 [ <required> $new ]
      }
    }
    Function [ <internal:apc> function apc_exists ] {

      - Parameters [1] {
        Parameter #0 [ <required> $keys ]
      }
    }
  }

  - Classes [1] {
    Class [ <internal:apc> <iterateable> class APCIterator extends APCuIterator implements Traversable, Iterator ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [9] {
        Method [ <internal:apc, overwrites APCuIterator, ctor> public method __construct ] {

          - Parameters [5] {
            Parameter #0 [ <required> $ignored ]
            Parameter #1 [ <optional> $search ]
            Parameter #2 [ <optional> $format ]
            Parameter #3 [ <optional> $chunk_size ]
            Parameter #4 [ <optional> $list ]
          }
        }

        Method [ <internal:apcu, inherits APCuIterator, prototype Iterator> public method rewind ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:apcu, inherits APCuIterator, prototype Iterator> public method current ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:apcu, inherits APCuIterator, prototype Iterator> public method key ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:apcu, inherits APCuIterator, prototype Iterator> public method next ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:apcu, inherits APCuIterator, prototype Iterator> public method valid ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:apcu, inherits APCuIterator> public method getTotalHits ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:apcu, inherits APCuIterator> public method getTotalSize ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:apcu, inherits APCuIterator> public method getTotalCount ] {

          - Parameters [0] {
          }
        }
      }
    }
  }
}


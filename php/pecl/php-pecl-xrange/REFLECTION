Extension [ <persistent> extension #145 xrange version 1.3.2 ] {

  - Functions {
    Function [ <internal:xrange> function xrange ] {
    }
  }

  - Classes [4] {
    Class [ <internal:xrange> <iterateable> class XRangeIterator implements SeekableIterator, Traversable, Iterator, Countable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [9] {
        Method [ <internal:xrange, ctor> public method __construct ] {
        }

        Method [ <internal:xrange, prototype Iterator> public method current ] {
        }

        Method [ <internal:xrange, prototype Iterator> public method key ] {
        }

        Method [ <internal:xrange, prototype Iterator> public method next ] {
        }

        Method [ <internal:xrange, prototype Iterator> public method rewind ] {
        }

        Method [ <internal:xrange, prototype Iterator> public method valid ] {
        }

        Method [ <internal:xrange, prototype SeekableIterator> public method seek ] {

          - Parameters [1] {
            Parameter #0 [ <required> $position ]
          }
        }

        Method [ <internal:xrange, prototype Countable> public method count ] {
        }

        Method [ <internal:xrange> public method __toString ] {
        }
      }
    }

    Class [ <internal:xrange> <iterateable> class OddFilterIterator extends FilterIterator implements Iterator, Traversable, OuterIterator ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [8] {
        Method [ <internal:xrange, overwrites FilterIterator, prototype FilterIterator> public method accept ] {
        }

        Method [ <internal:SPL, inherits FilterIterator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> Iterator $iterator ]
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype Iterator> public method rewind ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype Iterator> public method valid ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype Iterator> public method key ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype Iterator> public method current ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype Iterator> public method next ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype OuterIterator> public method getInnerIterator ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:xrange> <iterateable> class EvenFilterIterator extends FilterIterator implements Iterator, Traversable, OuterIterator ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [8] {
        Method [ <internal:xrange, overwrites FilterIterator, prototype FilterIterator> public method accept ] {
        }

        Method [ <internal:SPL, inherits FilterIterator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> Iterator $iterator ]
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype Iterator> public method rewind ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype Iterator> public method valid ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype Iterator> public method key ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype Iterator> public method current ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype Iterator> public method next ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype OuterIterator> public method getInnerIterator ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:xrange> <iterateable> class NumericFilterIterator extends FilterIterator implements Iterator, Traversable, OuterIterator ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [8] {
        Method [ <internal:xrange, overwrites FilterIterator, prototype FilterIterator> public method accept ] {
        }

        Method [ <internal:SPL, inherits FilterIterator, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> Iterator $iterator ]
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype Iterator> public method rewind ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype Iterator> public method valid ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype Iterator> public method key ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype Iterator> public method current ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype Iterator> public method next ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:SPL, inherits FilterIterator, prototype OuterIterator> public method getInnerIterator ] {

          - Parameters [0] {
          }
        }
      }
    }
  }
}


Extension [ <persistent> extension #178 SDL version 0.9.3 ] {

  - Constants [389] {
    Constant [ integer SDL_INIT_TIMER ] { 1 }
    Constant [ integer SDL_INIT_AUDIO ] { 16 }
    Constant [ integer SDL_INIT_VIDEO ] { 32 }
    Constant [ integer SDL_INIT_CDROM ] { 256 }
    Constant [ integer SDL_INIT_JOYSTICK ] { 512 }
    Constant [ integer SDL_INIT_NOPARACHUTE ] { 1048576 }
    Constant [ integer SDL_INIT_EVENTTHREAD ] { 16777216 }
    Constant [ integer SDL_INIT_EVERYTHING ] { 65535 }
    Constant [ integer SDL_CD_TRAYEMPTY ] { 0 }
    Constant [ integer SDL_CD_STOPPED ] { 1 }
    Constant [ integer SDL_CD_PLAYING ] { 2 }
    Constant [ integer SDL_CD_PAUSED ] { 3 }
    Constant [ integer SDL_CD_ERROR ] { -1 }
    Constant [ integer SDL_AUDIO_TRACK ] { 0 }
    Constant [ integer SDL_DATA_TRACK ] { 4 }
    Constant [ integer SDL_CD_FPS ] { 75 }
    Constant [ integer SDL_MAX_TRACKS ] { 99 }
    Constant [ integer SDL_SRCALPHA ] { 65536 }
    Constant [ integer SDL_RLEACCEL ] { 16384 }
    Constant [ integer SDL_SWSURFACE ] { 0 }
    Constant [ integer SDL_HWSURFACE ] { 1 }
    Constant [ integer SDL_ASYNCBLIT ] { 4 }
    Constant [ integer SDL_ANYFORMAT ] { 268435456 }
    Constant [ integer SDL_HWPALETTE ] { 536870912 }
    Constant [ integer SDL_DOUBLEBUF ] { 1073741824 }
    Constant [ integer SDL_FULLSCREEN ] { 2147483648 }
    Constant [ integer SDL_OPENGL ] { 2 }
    Constant [ integer SDL_OPENGLBLIT ] { 10 }
    Constant [ integer SDL_SRCCOLORKEY ] { 4096 }
    Constant [ integer SDL_BYTEORDER ] { 1234 }
    Constant [ integer SDL_BIG_ENDIAN ] { 4321 }
    Constant [ integer SDL_RESIZABLE ] { 16 }
    Constant [ integer SDL_NOFRAME ] { 32 }
    Constant [ integer SDL_GL_RED_SIZE ] { 0 }
    Constant [ integer SDL_GL_GREEN_SIZE ] { 1 }
    Constant [ integer SDL_GL_BLUE_SIZE ] { 2 }
    Constant [ integer SDL_GL_ALPHA_SIZE ] { 3 }
    Constant [ integer SDL_GL_BUFFER_SIZE ] { 4 }
    Constant [ integer SDL_GL_DOUBLEBUFFER ] { 5 }
    Constant [ integer SDL_GL_DEPTH_SIZE ] { 6 }
    Constant [ integer SDL_GL_STENCIL_SIZE ] { 7 }
    Constant [ integer SDL_GL_ACCUM_RED_SIZE ] { 8 }
    Constant [ integer SDL_GL_ACCUM_GREEN_SIZE ] { 9 }
    Constant [ integer SDL_GL_ACCUM_BLUE_SIZE ] { 10 }
    Constant [ integer SDL_GL_ACCUM_ALPHA_SIZE ] { 11 }
    Constant [ integer SDL_YV12_OVERLAY ] { 842094169 }
    Constant [ integer SDL_IYUV_OVERLAY ] { 1448433993 }
    Constant [ integer SDL_YUY2_OVERLAY ] { 844715353 }
    Constant [ integer SDL_UYVY_OVERLAY ] { 1498831189 }
    Constant [ integer SDL_YVYU_OVERLAY ] { 1431918169 }
    Constant [ integer SDL_GRAB_QUERY ] { -1 }
    Constant [ integer SDL_GRAB_OFF ] { 0 }
    Constant [ integer SDL_GRAB_ON ] { 1 }
    Constant [ integer SDL_DEFAULT_REPEAT_INTERVAL ] { 30 }
    Constant [ integer SDL_DEFAULT_REPEAT_DELAY ] { 500 }
    Constant [ integer SDL_PRESSED ] { 1 }
    Constant [ integer SDL_RELEASED ] { 0 }
    Constant [ integer SDL_QUERY ] { -1 }
    Constant [ integer SDL_IGNORE ] { 0 }
    Constant [ integer SDL_DISABLE ] { 0 }
    Constant [ integer SDL_ENABLE ] { 1 }
    Constant [ integer SDL_ADDEVENT ] { 0 }
    Constant [ integer SDL_PEEKEVENT ] { 1 }
    Constant [ integer SDL_GETEVENT ] { 2 }
    Constant [ integer SDL_ALLEVENTS ] { 4294967295 }
    Constant [ integer SDL_ACTIVEEVENTMASK ] { 2 }
    Constant [ integer SDL_KEYDOWNMASK ] { 4 }
    Constant [ integer SDL_KEYUPMASK ] { 8 }
    Constant [ integer SDL_MOUSEMOTIONMASK ] { 16 }
    Constant [ integer SDL_MOUSEBUTTONDOWNMASK ] { 32 }
    Constant [ integer SDL_MOUSEBUTTONUPMASK ] { 64 }
    Constant [ integer SDL_MOUSEEVENTMASK ] { 112 }
    Constant [ integer SDL_JOYAXISMOTIONMASK ] { 128 }
    Constant [ integer SDL_JOYBALLMOTIONMASK ] { 256 }
    Constant [ integer SDL_JOYHATMOTIONMASK ] { 512 }
    Constant [ integer SDL_JOYBUTTONDOWNMASK ] { 1024 }
    Constant [ integer SDL_JOYBUTTONUPMASK ] { 2048 }
    Constant [ integer SDL_JOYEVENTMASK ] { 3968 }
    Constant [ integer SDL_VIDEORESIZEMASK ] { 65536 }
    Constant [ integer SDL_VIDEOEXPOSEMASK ] { 131072 }
    Constant [ integer SDL_QUITMASK ] { 4096 }
    Constant [ integer SDL_SYSWMEVENTMASK ] { 8192 }
    Constant [ integer SDL_NOEVENT ] { 0 }
    Constant [ integer SDL_ACTIVEEVENT ] { 1 }
    Constant [ integer SDL_KEYDOWN ] { 2 }
    Constant [ integer SDL_KEYUP ] { 3 }
    Constant [ integer SDL_MOUSEMOTION ] { 4 }
    Constant [ integer SDL_MOUSEBUTTONDOWN ] { 5 }
    Constant [ integer SDL_MOUSEBUTTONUP ] { 6 }
    Constant [ integer SDL_JOYAXISMOTION ] { 7 }
    Constant [ integer SDL_JOYBALLMOTION ] { 8 }
    Constant [ integer SDL_JOYHATMOTION ] { 9 }
    Constant [ integer SDL_JOYBUTTONDOWN ] { 10 }
    Constant [ integer SDL_JOYBUTTONUP ] { 11 }
    Constant [ integer SDL_QUIT ] { 12 }
    Constant [ integer SDL_SYSWMEVENT ] { 13 }
    Constant [ integer SDL_EVENT_RESERVEDA ] { 14 }
    Constant [ integer SDL_EVENT_RESERVEDB ] { 15 }
    Constant [ integer SDL_VIDEORESIZE ] { 16 }
    Constant [ integer SDL_VIDEOEXPOSE ] { 17 }
    Constant [ integer SDL_EVENT_RESERVED2 ] { 18 }
    Constant [ integer SDL_EVENT_RESERVED3 ] { 19 }
    Constant [ integer SDL_EVENT_RESERVED4 ] { 20 }
    Constant [ integer SDL_EVENT_RESERVED5 ] { 21 }
    Constant [ integer SDL_EVENT_RESERVED6 ] { 22 }
    Constant [ integer SDL_EVENT_RESERVED7 ] { 23 }
    Constant [ integer SDL_USEREVENT ] { 24 }
    Constant [ integer SDL_NUMEVENTS ] { 32 }
    Constant [ integer SDL_APPMOUSEFOCUS ] { 1 }
    Constant [ integer SDL_APPINPUTFOCUS ] { 2 }
    Constant [ integer SDL_APPACTIVE ] { 4 }
    Constant [ integer SDLK_UNKNOWN ] { 0 }
    Constant [ integer SDLK_FIRST ] { 0 }
    Constant [ integer SDLK_BACKSPACE ] { 8 }
    Constant [ integer SDLK_TAB ] { 9 }
    Constant [ integer SDLK_CLEAR ] { 12 }
    Constant [ integer SDLK_RETURN ] { 13 }
    Constant [ integer SDLK_PAUSE ] { 19 }
    Constant [ integer SDLK_ESCAPE ] { 27 }
    Constant [ integer SDLK_SPACE ] { 32 }
    Constant [ integer SDLK_EXCLAIM ] { 33 }
    Constant [ integer SDLK_QUOTEDBL ] { 34 }
    Constant [ integer SDLK_HASH ] { 35 }
    Constant [ integer SDLK_DOLLAR ] { 36 }
    Constant [ integer SDLK_AMPERSAND ] { 38 }
    Constant [ integer SDLK_QUOTE ] { 39 }
    Constant [ integer SDLK_LEFTPAREN ] { 40 }
    Constant [ integer SDLK_RIGHTPAREN ] { 41 }
    Constant [ integer SDLK_ASTERISK ] { 42 }
    Constant [ integer SDLK_PLUS ] { 43 }
    Constant [ integer SDLK_COMMA ] { 44 }
    Constant [ integer SDLK_MINUS ] { 45 }
    Constant [ integer SDLK_PERIOD ] { 46 }
    Constant [ integer SDLK_SLASH ] { 47 }
    Constant [ integer SDLK_0 ] { 48 }
    Constant [ integer SDLK_1 ] { 49 }
    Constant [ integer SDLK_2 ] { 50 }
    Constant [ integer SDLK_3 ] { 51 }
    Constant [ integer SDLK_4 ] { 52 }
    Constant [ integer SDLK_5 ] { 53 }
    Constant [ integer SDLK_6 ] { 54 }
    Constant [ integer SDLK_7 ] { 55 }
    Constant [ integer SDLK_8 ] { 56 }
    Constant [ integer SDLK_9 ] { 57 }
    Constant [ integer SDLK_COLON ] { 58 }
    Constant [ integer SDLK_SEMICOLON ] { 59 }
    Constant [ integer SDLK_LESS ] { 60 }
    Constant [ integer SDLK_EQUALS ] { 61 }
    Constant [ integer SDLK_GREATER ] { 62 }
    Constant [ integer SDLK_QUESTION ] { 63 }
    Constant [ integer SDLK_AT ] { 64 }
    Constant [ integer SDLK_LEFTBRACKET ] { 91 }
    Constant [ integer SDLK_BACKSLASH ] { 92 }
    Constant [ integer SDLK_RIGHTBRACKET ] { 93 }
    Constant [ integer SDLK_CARET ] { 94 }
    Constant [ integer SDLK_UNDERSCORE ] { 95 }
    Constant [ integer SDLK_BACKQUOTE ] { 96 }
    Constant [ integer SDLK_a ] { 97 }
    Constant [ integer SDLK_b ] { 98 }
    Constant [ integer SDLK_c ] { 99 }
    Constant [ integer SDLK_d ] { 100 }
    Constant [ integer SDLK_e ] { 101 }
    Constant [ integer SDLK_f ] { 102 }
    Constant [ integer SDLK_g ] { 103 }
    Constant [ integer SDLK_h ] { 104 }
    Constant [ integer SDLK_i ] { 105 }
    Constant [ integer SDLK_j ] { 106 }
    Constant [ integer SDLK_k ] { 107 }
    Constant [ integer SDLK_l ] { 108 }
    Constant [ integer SDLK_m ] { 109 }
    Constant [ integer SDLK_n ] { 110 }
    Constant [ integer SDLK_o ] { 111 }
    Constant [ integer SDLK_p ] { 112 }
    Constant [ integer SDLK_q ] { 113 }
    Constant [ integer SDLK_r ] { 114 }
    Constant [ integer SDLK_s ] { 115 }
    Constant [ integer SDLK_t ] { 116 }
    Constant [ integer SDLK_u ] { 117 }
    Constant [ integer SDLK_v ] { 118 }
    Constant [ integer SDLK_w ] { 119 }
    Constant [ integer SDLK_x ] { 120 }
    Constant [ integer SDLK_y ] { 121 }
    Constant [ integer SDLK_z ] { 122 }
    Constant [ integer SDLK_DELETE ] { 127 }
    Constant [ integer SDLK_WORLD_0 ] { 160 }
    Constant [ integer SDLK_WORLD_1 ] { 161 }
    Constant [ integer SDLK_WORLD_2 ] { 162 }
    Constant [ integer SDLK_WORLD_3 ] { 163 }
    Constant [ integer SDLK_WORLD_4 ] { 164 }
    Constant [ integer SDLK_WORLD_5 ] { 165 }
    Constant [ integer SDLK_WORLD_6 ] { 166 }
    Constant [ integer SDLK_WORLD_7 ] { 167 }
    Constant [ integer SDLK_WORLD_8 ] { 168 }
    Constant [ integer SDLK_WORLD_9 ] { 169 }
    Constant [ integer SDLK_WORLD_10 ] { 170 }
    Constant [ integer SDLK_WORLD_11 ] { 171 }
    Constant [ integer SDLK_WORLD_12 ] { 172 }
    Constant [ integer SDLK_WORLD_13 ] { 173 }
    Constant [ integer SDLK_WORLD_14 ] { 174 }
    Constant [ integer SDLK_WORLD_15 ] { 175 }
    Constant [ integer SDLK_WORLD_16 ] { 176 }
    Constant [ integer SDLK_WORLD_17 ] { 177 }
    Constant [ integer SDLK_WORLD_18 ] { 178 }
    Constant [ integer SDLK_WORLD_19 ] { 179 }
    Constant [ integer SDLK_WORLD_20 ] { 180 }
    Constant [ integer SDLK_WORLD_21 ] { 181 }
    Constant [ integer SDLK_WORLD_22 ] { 182 }
    Constant [ integer SDLK_WORLD_23 ] { 183 }
    Constant [ integer SDLK_WORLD_24 ] { 184 }
    Constant [ integer SDLK_WORLD_25 ] { 185 }
    Constant [ integer SDLK_WORLD_26 ] { 186 }
    Constant [ integer SDLK_WORLD_27 ] { 187 }
    Constant [ integer SDLK_WORLD_28 ] { 188 }
    Constant [ integer SDLK_WORLD_29 ] { 189 }
    Constant [ integer SDLK_WORLD_30 ] { 190 }
    Constant [ integer SDLK_WORLD_31 ] { 191 }
    Constant [ integer SDLK_WORLD_32 ] { 192 }
    Constant [ integer SDLK_WORLD_33 ] { 193 }
    Constant [ integer SDLK_WORLD_34 ] { 194 }
    Constant [ integer SDLK_WORLD_35 ] { 195 }
    Constant [ integer SDLK_WORLD_36 ] { 196 }
    Constant [ integer SDLK_WORLD_37 ] { 197 }
    Constant [ integer SDLK_WORLD_38 ] { 198 }
    Constant [ integer SDLK_WORLD_39 ] { 199 }
    Constant [ integer SDLK_WORLD_40 ] { 200 }
    Constant [ integer SDLK_WORLD_41 ] { 201 }
    Constant [ integer SDLK_WORLD_42 ] { 202 }
    Constant [ integer SDLK_WORLD_43 ] { 203 }
    Constant [ integer SDLK_WORLD_44 ] { 204 }
    Constant [ integer SDLK_WORLD_45 ] { 205 }
    Constant [ integer SDLK_WORLD_46 ] { 206 }
    Constant [ integer SDLK_WORLD_47 ] { 207 }
    Constant [ integer SDLK_WORLD_48 ] { 208 }
    Constant [ integer SDLK_WORLD_49 ] { 209 }
    Constant [ integer SDLK_WORLD_50 ] { 210 }
    Constant [ integer SDLK_WORLD_51 ] { 211 }
    Constant [ integer SDLK_WORLD_52 ] { 212 }
    Constant [ integer SDLK_WORLD_53 ] { 213 }
    Constant [ integer SDLK_WORLD_54 ] { 214 }
    Constant [ integer SDLK_WORLD_55 ] { 215 }
    Constant [ integer SDLK_WORLD_56 ] { 216 }
    Constant [ integer SDLK_WORLD_57 ] { 217 }
    Constant [ integer SDLK_WORLD_58 ] { 218 }
    Constant [ integer SDLK_WORLD_59 ] { 219 }
    Constant [ integer SDLK_WORLD_60 ] { 220 }
    Constant [ integer SDLK_WORLD_61 ] { 221 }
    Constant [ integer SDLK_WORLD_62 ] { 222 }
    Constant [ integer SDLK_WORLD_63 ] { 223 }
    Constant [ integer SDLK_WORLD_64 ] { 224 }
    Constant [ integer SDLK_WORLD_65 ] { 225 }
    Constant [ integer SDLK_WORLD_66 ] { 226 }
    Constant [ integer SDLK_WORLD_67 ] { 227 }
    Constant [ integer SDLK_WORLD_68 ] { 228 }
    Constant [ integer SDLK_WORLD_69 ] { 229 }
    Constant [ integer SDLK_WORLD_70 ] { 230 }
    Constant [ integer SDLK_WORLD_71 ] { 231 }
    Constant [ integer SDLK_WORLD_72 ] { 232 }
    Constant [ integer SDLK_WORLD_73 ] { 233 }
    Constant [ integer SDLK_WORLD_74 ] { 234 }
    Constant [ integer SDLK_WORLD_75 ] { 235 }
    Constant [ integer SDLK_WORLD_76 ] { 236 }
    Constant [ integer SDLK_WORLD_77 ] { 237 }
    Constant [ integer SDLK_WORLD_78 ] { 238 }
    Constant [ integer SDLK_WORLD_79 ] { 239 }
    Constant [ integer SDLK_WORLD_80 ] { 240 }
    Constant [ integer SDLK_WORLD_81 ] { 241 }
    Constant [ integer SDLK_WORLD_82 ] { 242 }
    Constant [ integer SDLK_WORLD_83 ] { 243 }
    Constant [ integer SDLK_WORLD_84 ] { 244 }
    Constant [ integer SDLK_WORLD_85 ] { 245 }
    Constant [ integer SDLK_WORLD_86 ] { 246 }
    Constant [ integer SDLK_WORLD_87 ] { 247 }
    Constant [ integer SDLK_WORLD_88 ] { 248 }
    Constant [ integer SDLK_WORLD_89 ] { 249 }
    Constant [ integer SDLK_WORLD_90 ] { 250 }
    Constant [ integer SDLK_WORLD_91 ] { 251 }
    Constant [ integer SDLK_WORLD_92 ] { 252 }
    Constant [ integer SDLK_WORLD_93 ] { 253 }
    Constant [ integer SDLK_WORLD_94 ] { 254 }
    Constant [ integer SDLK_WORLD_95 ] { 255 }
    Constant [ integer SDLK_KP0 ] { 256 }
    Constant [ integer SDLK_KP1 ] { 257 }
    Constant [ integer SDLK_KP2 ] { 258 }
    Constant [ integer SDLK_KP3 ] { 259 }
    Constant [ integer SDLK_KP4 ] { 260 }
    Constant [ integer SDLK_KP5 ] { 261 }
    Constant [ integer SDLK_KP6 ] { 262 }
    Constant [ integer SDLK_KP7 ] { 263 }
    Constant [ integer SDLK_KP8 ] { 264 }
    Constant [ integer SDLK_KP9 ] { 265 }
    Constant [ integer SDLK_KP_PERIOD ] { 266 }
    Constant [ integer SDLK_KP_DIVIDE ] { 267 }
    Constant [ integer SDLK_KP_MULTIPLY ] { 268 }
    Constant [ integer SDLK_KP_MINUS ] { 269 }
    Constant [ integer SDLK_KP_PLUS ] { 270 }
    Constant [ integer SDLK_KP_ENTER ] { 271 }
    Constant [ integer SDLK_KP_EQUALS ] { 272 }
    Constant [ integer SDLK_UP ] { 273 }
    Constant [ integer SDLK_DOWN ] { 274 }
    Constant [ integer SDLK_RIGHT ] { 275 }
    Constant [ integer SDLK_LEFT ] { 276 }
    Constant [ integer SDLK_INSERT ] { 277 }
    Constant [ integer SDLK_HOME ] { 278 }
    Constant [ integer SDLK_END ] { 279 }
    Constant [ integer SDLK_PAGEUP ] { 280 }
    Constant [ integer SDLK_PAGEDOWN ] { 281 }
    Constant [ integer SDLK_F1 ] { 282 }
    Constant [ integer SDLK_F2 ] { 283 }
    Constant [ integer SDLK_F3 ] { 284 }
    Constant [ integer SDLK_F4 ] { 285 }
    Constant [ integer SDLK_F5 ] { 286 }
    Constant [ integer SDLK_F6 ] { 287 }
    Constant [ integer SDLK_F7 ] { 288 }
    Constant [ integer SDLK_F8 ] { 289 }
    Constant [ integer SDLK_F9 ] { 290 }
    Constant [ integer SDLK_F10 ] { 291 }
    Constant [ integer SDLK_F11 ] { 292 }
    Constant [ integer SDLK_F12 ] { 293 }
    Constant [ integer SDLK_F13 ] { 294 }
    Constant [ integer SDLK_F14 ] { 295 }
    Constant [ integer SDLK_F15 ] { 296 }
    Constant [ integer SDLK_NUMLOCK ] { 300 }
    Constant [ integer SDLK_CAPSLOCK ] { 301 }
    Constant [ integer SDLK_SCROLLOCK ] { 302 }
    Constant [ integer SDLK_RSHIFT ] { 303 }
    Constant [ integer SDLK_LSHIFT ] { 304 }
    Constant [ integer SDLK_RCTRL ] { 305 }
    Constant [ integer SDLK_LCTRL ] { 306 }
    Constant [ integer SDLK_RALT ] { 307 }
    Constant [ integer SDLK_LALT ] { 308 }
    Constant [ integer SDLK_RMETA ] { 309 }
    Constant [ integer SDLK_LMETA ] { 310 }
    Constant [ integer SDLK_LSUPER ] { 311 }
    Constant [ integer SDLK_RSUPER ] { 312 }
    Constant [ integer SDLK_MODE ] { 313 }
    Constant [ integer SDLK_COMPOSE ] { 314 }
    Constant [ integer SDLK_HELP ] { 315 }
    Constant [ integer SDLK_PRINT ] { 316 }
    Constant [ integer SDLK_SYSREQ ] { 317 }
    Constant [ integer SDLK_BREAK ] { 318 }
    Constant [ integer SDLK_MENU ] { 319 }
    Constant [ integer SDLK_POWER ] { 320 }
    Constant [ integer SDLK_EURO ] { 321 }
    Constant [ integer SDLK_LAST ] { 323 }
    Constant [ integer KMOD_NONE ] { 0 }
    Constant [ integer KMOD_LSHIFT ] { 1 }
    Constant [ integer KMOD_RSHIFT ] { 2 }
    Constant [ integer KMOD_LCTRL ] { 64 }
    Constant [ integer KMOD_RCTRL ] { 128 }
    Constant [ integer KMOD_LALT ] { 256 }
    Constant [ integer KMOD_RALT ] { 512 }
    Constant [ integer KMOD_LMETA ] { 1024 }
    Constant [ integer KMOD_RMETA ] { 2048 }
    Constant [ integer KMOD_NUM ] { 4096 }
    Constant [ integer KMOD_CAPS ] { 8192 }
    Constant [ integer KMOD_MODE ] { 16384 }
    Constant [ integer KMOD_RESERVED ] { 32768 }
    Constant [ integer KMOD_CTRL ] { 192 }
    Constant [ integer KMOD_SHIFT ] { 3 }
    Constant [ integer KMOD_ALT ] { 768 }
    Constant [ integer KMOD_META ] { 3072 }
    Constant [ integer SDL_BUTTON_LEFT ] { 1 }
    Constant [ integer SDL_BUTTON_MIDDLE ] { 2 }
    Constant [ integer SDL_BUTTON_RIGHT ] { 3 }
    Constant [ integer SDL_BUTTON_LMASK ] { 1 }
    Constant [ integer SDL_BUTTON_MMASK ] { 2 }
    Constant [ integer SDL_BUTTON_RMASK ] { 4 }
    Constant [ integer SDL_HAT_CENTERED ] { 0 }
    Constant [ integer SDL_HAT_UP ] { 1 }
    Constant [ integer SDL_HAT_RIGHT ] { 2 }
    Constant [ integer SDL_HAT_DOWN ] { 4 }
    Constant [ integer SDL_HAT_LEFT ] { 8 }
    Constant [ integer SDL_HAT_RIGHTUP ] { 3 }
    Constant [ integer SDL_HAT_RIGHTDOWN ] { 6 }
    Constant [ integer SDL_HAT_LEFTUP ] { 9 }
    Constant [ integer SDL_HAT_LEFTDOWN ] { 12 }
    Constant [ integer AUDIO_U8 ] { 8 }
    Constant [ integer AUDIO_S8 ] { 32776 }
    Constant [ integer AUDIO_U16 ] { 16 }
    Constant [ integer AUDIO_U16LSB ] { 16 }
    Constant [ integer AUDIO_S16 ] { 32784 }
    Constant [ integer AUDIO_S16LSB ] { 32784 }
    Constant [ integer AUDIO_U16MSB ] { 4112 }
    Constant [ integer AUDIO_S16MSB ] { 36880 }
    Constant [ integer AUDIO_U16SYS ] { 16 }
    Constant [ integer AUDIO_S16SYS ] { 32784 }
    Constant [ integer SDL_AUDIO_STOPPED ] { 0 }
    Constant [ integer SDL_AUDIO_PLAYING ] { 1 }
    Constant [ integer SDL_AUDIO_PAUSED ] { 2 }
  }

  - Functions {
    Function [ <internal:SDL> function sdl_init ] {

      - Parameters [1] {
        Parameter #0 [ <required> $flags ]
      }
    }
    Function [ <internal:SDL> function sdl_initsubsystem ] {

      - Parameters [1] {
        Parameter #0 [ <required> $flags ]
      }
    }
    Function [ <internal:SDL> function sdl_quitsubsystem ] {

      - Parameters [1] {
        Parameter #0 [ <required> $flags ]
      }
    }
    Function [ <internal:SDL> function sdl_quit ] {

      - Parameters [1] {
        Parameter #0 [ <required> $flags ]
      }
    }
    Function [ <internal:SDL> function sdl_wasinit ] {

      - Parameters [1] {
        Parameter #0 [ <required> $flags ]
      }
    }
    Function [ <internal:SDL> function sdl_mustlock ] {

      - Parameters [1] {
        Parameter #0 [ <required> $surface ]
      }
    }
    Function [ <internal:SDL> function sdl_getvideosurface ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_getvideoinfo ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_videodrivername ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_listmodes ] {

      - Parameters [2] {
        Parameter #0 [ <required> $format ]
        Parameter #1 [ <required> $flags ]
      }
    }
    Function [ <internal:SDL> function sdl_videomodeok ] {

      - Parameters [4] {
        Parameter #0 [ <required> $width ]
        Parameter #1 [ <required> $height ]
        Parameter #2 [ <required> $bpp ]
        Parameter #3 [ <required> $flags ]
      }
    }
    Function [ <internal:SDL> function sdl_setvideomode ] {

      - Parameters [4] {
        Parameter #0 [ <required> $width ]
        Parameter #1 [ <required> $height ]
        Parameter #2 [ <required> $bpp ]
        Parameter #3 [ <required> $flags ]
      }
    }
    Function [ <internal:SDL> function sdl_updaterect ] {

      - Parameters [5] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $x ]
        Parameter #2 [ <required> $y ]
        Parameter #3 [ <required> $w ]
        Parameter #4 [ <required> $h ]
      }
    }
    Function [ <internal:SDL> function sdl_updaterects ] {

      - Parameters [3] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $numrects ]
        Parameter #2 [ <required> $rects ]
      }
    }
    Function [ <internal:SDL> function sdl_flip ] {

      - Parameters [1] {
        Parameter #0 [ <required> $screen ]
      }
    }
    Function [ <internal:SDL> function sdl_setcolors ] {

      - Parameters [4] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $colors ]
        Parameter #2 [ <required> $firstcolor ]
        Parameter #3 [ <required> $ncolors ]
      }
    }
    Function [ <internal:SDL> function sdl_setpalette ] {

      - Parameters [5] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $flags ]
        Parameter #2 [ <required> $colors ]
        Parameter #3 [ <required> $firstcolor ]
        Parameter #4 [ <required> $ncolors ]
      }
    }
    Function [ <internal:SDL> function sdl_setgamma ] {

      - Parameters [3] {
        Parameter #0 [ <required> $redgamma ]
        Parameter #1 [ <required> $greengamma ]
        Parameter #2 [ <required> $bluegamma ]
      }
    }
    Function [ <internal:SDL> function sdl_getgammaramp ] {

      - Parameters [3] {
        Parameter #0 [ <required> &$redtable ]
        Parameter #1 [ <required> &$greentable ]
        Parameter #2 [ <required> &$bluetable ]
      }
    }
    Function [ <internal:SDL> function sdl_setgammaramp ] {

      - Parameters [3] {
        Parameter #0 [ <required> $redtable ]
        Parameter #1 [ <required> $greentable ]
        Parameter #2 [ <required> $bluetable ]
      }
    }
    Function [ <internal:SDL> function sdl_maprgb ] {

      - Parameters [4] {
        Parameter #0 [ <required> $format ]
        Parameter #1 [ <required> $red ]
        Parameter #2 [ <required> $green ]
        Parameter #3 [ <required> $blue ]
      }
    }
    Function [ <internal:SDL> function sdl_maprgba ] {

      - Parameters [5] {
        Parameter #0 [ <required> $format ]
        Parameter #1 [ <required> $red ]
        Parameter #2 [ <required> $green ]
        Parameter #3 [ <required> $blue ]
        Parameter #4 [ <required> $alpha ]
      }
    }
    Function [ <internal:SDL> function sdl_getrgb ] {

      - Parameters [5] {
        Parameter #0 [ <required> $pixel ]
        Parameter #1 [ <required> $format ]
        Parameter #2 [ <required> &$red ]
        Parameter #3 [ <required> &$green ]
        Parameter #4 [ <required> &$blue ]
      }
    }
    Function [ <internal:SDL> function sdl_getrgba ] {

      - Parameters [6] {
        Parameter #0 [ <required> $pixel ]
        Parameter #1 [ <required> $format ]
        Parameter #2 [ <required> &$red ]
        Parameter #3 [ <required> &$green ]
        Parameter #4 [ <required> &$blue ]
        Parameter #5 [ <required> &$alpha ]
      }
    }
    Function [ <internal:SDL> function sdl_creatergbsurface ] {

      - Parameters [8] {
        Parameter #0 [ <required> $flags ]
        Parameter #1 [ <required> $width ]
        Parameter #2 [ <required> $height ]
        Parameter #3 [ <required> $depth ]
        Parameter #4 [ <required> $Rmask ]
        Parameter #5 [ <required> $Gmask ]
        Parameter #6 [ <required> $Bmask ]
        Parameter #7 [ <required> $Amask ]
      }
    }
    Function [ <internal:SDL> function sdl_creatergbsurfacefrom ] {

      - Parameters [9] {
        Parameter #0 [ <required> $pixels ]
        Parameter #1 [ <required> $width ]
        Parameter #2 [ <required> $height ]
        Parameter #3 [ <required> $depth ]
        Parameter #4 [ <required> $pitch ]
        Parameter #5 [ <required> $Rmask ]
        Parameter #6 [ <required> $Gmask ]
        Parameter #7 [ <required> $Bmask ]
        Parameter #8 [ <required> $Amask ]
      }
    }
    Function [ <internal:SDL> function sdl_freesurface ] {

      - Parameters [1] {
        Parameter #0 [ <required> $surface ]
      }
    }
    Function [ <internal:SDL> function sdl_locksurface ] {

      - Parameters [1] {
        Parameter #0 [ <required> $surface ]
      }
    }
    Function [ <internal:SDL> function sdl_unlocksurface ] {

      - Parameters [1] {
        Parameter #0 [ <required> $surface ]
      }
    }
    Function [ <internal:SDL> function sdl_loadbmp ] {

      - Parameters [1] {
        Parameter #0 [ <required> $file ]
      }
    }
    Function [ <internal:SDL> function sdl_savebmp ] {

      - Parameters [2] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $file ]
      }
    }
    Function [ <internal:SDL> function sdl_setcolorkey ] {

      - Parameters [3] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $flag ]
        Parameter #2 [ <required> $key ]
      }
    }
    Function [ <internal:SDL> function sdl_setalpha ] {

      - Parameters [3] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $flag ]
        Parameter #2 [ <required> $alpha ]
      }
    }
    Function [ <internal:SDL> function sdl_setcliprect ] {

      - Parameters [2] {
        Parameter #0 [ <required> &$surface ]
        Parameter #1 [ <required> $rect ]
      }
    }
    Function [ <internal:SDL> function sdl_getcliprect ] {

      - Parameters [2] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> &$rect ]
      }
    }
    Function [ <internal:SDL> function sdl_convertsurface ] {

      - Parameters [3] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $format ]
        Parameter #2 [ <required> $flags ]
      }
    }
    Function [ <internal:SDL> function sdl_blitsurface ] {

      - Parameters [4] {
        Parameter #0 [ <required> $srcsurface ]
        Parameter #1 [ <required> $srcrect ]
        Parameter #2 [ <required> $dstsurface ]
        Parameter #3 [ <required> $dstrect ]
      }
    }
    Function [ <internal:SDL> function sdl_fillrect ] {

      - Parameters [3] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $rect ]
        Parameter #2 [ <required> $color ]
      }
    }
    Function [ <internal:SDL> function sdl_displayformat ] {

      - Parameters [1] {
        Parameter #0 [ <required> $surface ]
      }
    }
    Function [ <internal:SDL> function sdl_displayformatalpha ] {

      - Parameters [1] {
        Parameter #0 [ <required> $surface ]
      }
    }
    Function [ <internal:SDL> function sdl_warpmouse ] {

      - Parameters [2] {
        Parameter #0 [ <required> $x ]
        Parameter #1 [ <required> $y ]
      }
    }
    Function [ <internal:SDL> function sdl_createcursor ] {

      - Parameters [6] {
        Parameter #0 [ <required> $data ]
        Parameter #1 [ <required> $mask ]
        Parameter #2 [ <required> $w ]
        Parameter #3 [ <required> $h ]
        Parameter #4 [ <required> $hot_x ]
        Parameter #5 [ <required> $hot_y ]
      }
    }
    Function [ <internal:SDL> function sdl_freecursor ] {

      - Parameters [1] {
        Parameter #0 [ <required> $cursor ]
      }
    }
    Function [ <internal:SDL> function sdl_setcursor ] {

      - Parameters [1] {
        Parameter #0 [ <required> $cursor ]
      }
    }
    Function [ <internal:SDL> function sdl_getcursor ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_showcursor ] {

      - Parameters [1] {
        Parameter #0 [ <required> $toggle ]
      }
    }
    Function [ <internal:SDL> function sdl_gl_loadlibrary ] {

      - Parameters [1] {
        Parameter #0 [ <required> $path ]
      }
    }
    Function [ <internal:SDL> function sdl_gl_getprocaddress ] {
    }
    Function [ <internal:SDL> function sdl_gl_getattribute ] {

      - Parameters [2] {
        Parameter #0 [ <required> $attr ]
        Parameter #1 [ <required> &$value ]
      }
    }
    Function [ <internal:SDL> function sdl_gl_setattribute ] {

      - Parameters [2] {
        Parameter #0 [ <required> $attr ]
        Parameter #1 [ <required> $value ]
      }
    }
    Function [ <internal:SDL> function sdl_gl_swapbuffers ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_createyuvoverlay ] {

      - Parameters [4] {
        Parameter #0 [ <required> $width ]
        Parameter #1 [ <required> $height ]
        Parameter #2 [ <required> $format ]
        Parameter #3 [ <required> $surface ]
      }
    }
    Function [ <internal:SDL> function sdl_lockyuvoverlay ] {

      - Parameters [1] {
        Parameter #0 [ <required> $overlay ]
      }
    }
    Function [ <internal:SDL> function sdl_unlockyuvoverlay ] {

      - Parameters [1] {
        Parameter #0 [ <required> $overlay ]
      }
    }
    Function [ <internal:SDL> function sdl_displayyuvoverlay ] {

      - Parameters [2] {
        Parameter #0 [ <required> $overlay ]
        Parameter #1 [ <required> $dstrect ]
      }
    }
    Function [ <internal:SDL> function sdl_freeyuvoverlay ] {

      - Parameters [1] {
        Parameter #0 [ <required> $overlay ]
      }
    }
    Function [ <internal:SDL> function sdl_getpixels ] {

      - Parameters [2] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> &$pixels ]
      }
    }
    Function [ <internal:SDL> function sdl_putpixels ] {

      - Parameters [2] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $pixels ]
      }
    }
    Function [ <internal:SDL> function sdl_wm_setcaption ] {

      - Parameters [2] {
        Parameter #0 [ <required> $title ]
        Parameter #1 [ <required> $icon ]
      }
    }
    Function [ <internal:SDL> function sdl_wm_getcaption ] {

      - Parameters [2] {
        Parameter #0 [ <required> &$title ]
        Parameter #1 [ <required> &$icon ]
      }
    }
    Function [ <internal:SDL> function sdl_wm_seticon ] {

      - Parameters [2] {
        Parameter #0 [ <required> $surface ]
        Parameter #1 [ <required> $mask ]
      }
    }
    Function [ <internal:SDL> function sdl_wm_iconifywindow ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_wm_togglefullscreen ] {

      - Parameters [1] {
        Parameter #0 [ <required> $surface ]
      }
    }
    Function [ <internal:SDL> function sdl_wm_grabinput ] {

      - Parameters [1] {
        Parameter #0 [ <required> $mode ]
      }
    }
    Function [ <internal:SDL> function sdl_button ] {

      - Parameters [1] {
        Parameter #0 [ <required> $button ]
      }
    }
    Function [ <internal:SDL> function sdl_pumpevents ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_peepevents ] {

      - Parameters [4] {
        Parameter #0 [ <required> &$events ]
        Parameter #1 [ <required> $numevents ]
        Parameter #2 [ <required> $action ]
        Parameter #3 [ <required> $mask ]
      }
    }
    Function [ <internal:SDL> function sdl_pollevent ] {

      - Parameters [1] {
        Parameter #0 [ <optional> &$event ]
      }
    }
    Function [ <internal:SDL> function sdl_waitevent ] {

      - Parameters [1] {
        Parameter #0 [ <optional> &$event ]
      }
    }
    Function [ <internal:SDL> function sdl_pushevent ] {

      - Parameters [1] {
        Parameter #0 [ <required> $event ]
      }
    }
    Function [ <internal:SDL> function sdl_seteventfilter ] {
    }
    Function [ <internal:SDL> function sdl_geteventfilter ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_eventstate ] {

      - Parameters [2] {
        Parameter #0 [ <required> $type ]
        Parameter #1 [ <required> $state ]
      }
    }
    Function [ <internal:SDL> function sdl_getkeystate ] {

      - Parameters [1] {
        Parameter #0 [ <optional> &$numkeys ]
      }
    }
    Function [ <internal:SDL> function sdl_getmodstate ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_setmodstate ] {

      - Parameters [1] {
        Parameter #0 [ <required> $modstate ]
      }
    }
    Function [ <internal:SDL> function sdl_getkeyname ] {

      - Parameters [1] {
        Parameter #0 [ <required> $key ]
      }
    }
    Function [ <internal:SDL> function sdl_enableunicode ] {

      - Parameters [1] {
        Parameter #0 [ <required> $enable ]
      }
    }
    Function [ <internal:SDL> function sdl_enablekeyrepeat ] {

      - Parameters [2] {
        Parameter #0 [ <required> $delay ]
        Parameter #1 [ <required> $interval ]
      }
    }
    Function [ <internal:SDL> function sdl_getmousestate ] {

      - Parameters [2] {
        Parameter #0 [ <required> &$x ]
        Parameter #1 [ <required> &$y ]
      }
    }
    Function [ <internal:SDL> function sdl_getrelativemousestate ] {

      - Parameters [2] {
        Parameter #0 [ <required> &$x ]
        Parameter #1 [ <required> &$y ]
      }
    }
    Function [ <internal:SDL> function sdl_getappstate ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_numjoysticks ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_joystickname ] {

      - Parameters [1] {
        Parameter #0 [ <required> $joystickindex ]
      }
    }
    Function [ <internal:SDL> function sdl_joystickopen ] {

      - Parameters [1] {
        Parameter #0 [ <required> $joystickindex ]
      }
    }
    Function [ <internal:SDL> function sdl_joystickopened ] {

      - Parameters [1] {
        Parameter #0 [ <required> $joystickindex ]
      }
    }
    Function [ <internal:SDL> function sdl_joystickindex ] {

      - Parameters [1] {
        Parameter #0 [ <required> $joystick ]
      }
    }
    Function [ <internal:SDL> function sdl_joysticknumaxes ] {

      - Parameters [1] {
        Parameter #0 [ <required> $joystick ]
      }
    }
    Function [ <internal:SDL> function sdl_joysticknumballs ] {

      - Parameters [1] {
        Parameter #0 [ <required> $joystick ]
      }
    }
    Function [ <internal:SDL> function sdl_joysticknumhats ] {

      - Parameters [1] {
        Parameter #0 [ <required> $joystick ]
      }
    }
    Function [ <internal:SDL> function sdl_joysticknumbuttons ] {

      - Parameters [1] {
        Parameter #0 [ <required> $joystick ]
      }
    }
    Function [ <internal:SDL> function sdl_joystickupdate ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_joystickeventstate ] {

      - Parameters [1] {
        Parameter #0 [ <required> &$state ]
      }
    }
    Function [ <internal:SDL> function sdl_joystickgetaxis ] {

      - Parameters [2] {
        Parameter #0 [ <required> $joystick ]
        Parameter #1 [ <required> $number ]
      }
    }
    Function [ <internal:SDL> function sdl_joystickgethat ] {

      - Parameters [2] {
        Parameter #0 [ <required> $joystick ]
        Parameter #1 [ <required> $number ]
      }
    }
    Function [ <internal:SDL> function sdl_joystickgetball ] {

      - Parameters [2] {
        Parameter #0 [ <required> $joystick ]
        Parameter #1 [ <required> $number ]
      }
    }
    Function [ <internal:SDL> function sdl_joystickgetbutton ] {

      - Parameters [2] {
        Parameter #0 [ <required> $joystick ]
        Parameter #1 [ <required> $number ]
      }
    }
    Function [ <internal:SDL> function sdl_joystickclose ] {

      - Parameters [1] {
        Parameter #0 [ <required> $joystick ]
      }
    }
    Function [ <internal:SDL> function sdl_cd_indrive ] {

      - Parameters [1] {
        Parameter #0 [ <required> $status ]
      }
    }
    Function [ <internal:SDL> function sdl_frames_to_msf ] {

      - Parameters [1] {
        Parameter #0 [ <required> $frame ]
      }
    }
    Function [ <internal:SDL> function sdl_msf_to_frames ] {

      - Parameters [3] {
        Parameter #0 [ <required> $minute ]
        Parameter #1 [ <required> $second ]
        Parameter #2 [ <required> $frame ]
      }
    }
    Function [ <internal:SDL> function sdl_cdnumdrives ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_cdname ] {

      - Parameters [1] {
        Parameter #0 [ <required> $drive ]
      }
    }
    Function [ <internal:SDL> function sdl_cdopen ] {

      - Parameters [1] {
        Parameter #0 [ <required> $drive ]
      }
    }
    Function [ <internal:SDL> function sdl_cdstatus ] {

      - Parameters [1] {
        Parameter #0 [ <required> &$cdrom ]
      }
    }
    Function [ <internal:SDL> function sdl_cdplay ] {

      - Parameters [3] {
        Parameter #0 [ <required> $cdrom ]
        Parameter #1 [ <required> $start ]
        Parameter #2 [ <required> $length ]
      }
    }
    Function [ <internal:SDL> function sdl_cdplaytracks ] {

      - Parameters [5] {
        Parameter #0 [ <required> $cdrom ]
        Parameter #1 [ <required> $start_track ]
        Parameter #2 [ <required> $start_frame ]
        Parameter #3 [ <required> $ntracks ]
        Parameter #4 [ <required> $nframes ]
      }
    }
    Function [ <internal:SDL> function sdl_cdpause ] {

      - Parameters [1] {
        Parameter #0 [ <required> $cdrom ]
      }
    }
    Function [ <internal:SDL> function sdl_cdresume ] {

      - Parameters [1] {
        Parameter #0 [ <required> $cdrom ]
      }
    }
    Function [ <internal:SDL> function sdl_cdstop ] {

      - Parameters [1] {
        Parameter #0 [ <required> $cdrom ]
      }
    }
    Function [ <internal:SDL> function sdl_cdeject ] {

      - Parameters [1] {
        Parameter #0 [ <required> $cdrom ]
      }
    }
    Function [ <internal:SDL> function sdl_cdclose ] {

      - Parameters [1] {
        Parameter #0 [ <required> $cdrom ]
      }
    }
    Function [ <internal:SDL> function sdl_createmutex ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_destroymutex ] {

      - Parameters [1] {
        Parameter #0 [ <required> $mutex ]
      }
    }
    Function [ <internal:SDL> function sdl_mutexp ] {

      - Parameters [1] {
        Parameter #0 [ <required> $mutex ]
      }
    }
    Function [ <internal:SDL> function sdl_mutexv ] {

      - Parameters [1] {
        Parameter #0 [ <required> $mutex ]
      }
    }
    Function [ <internal:SDL> function sdl_lockmutex ] {

      - Parameters [1] {
        Parameter #0 [ <required> $mutex ]
      }
    }
    Function [ <internal:SDL> function sdl_unlockmutex ] {

      - Parameters [1] {
        Parameter #0 [ <required> $mutex ]
      }
    }
    Function [ <internal:SDL> function sdl_getticks ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_delay ] {

      - Parameters [1] {
        Parameter #0 [ <required> $ms ]
      }
    }
    Function [ <internal:SDL> function sdl_addtimer ] {
    }
    Function [ <internal:SDL> function sdl_removetimer ] {
    }
    Function [ <internal:SDL> function sdl_openaudio ] {

      - Parameters [2] {
        Parameter #0 [ <required> $desired ]
        Parameter #1 [ <required> &$obtained ]
      }
    }
    Function [ <internal:SDL> function sdl_pauseaudio ] {

      - Parameters [1] {
        Parameter #0 [ <required> $pause_on ]
      }
    }
    Function [ <internal:SDL> function sdl_getaudiostatus ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_loadwav ] {

      - Parameters [4] {
        Parameter #0 [ <required> $file ]
        Parameter #1 [ <required> &$spec ]
        Parameter #2 [ <required> &$buf ]
        Parameter #3 [ <required> &$len ]
      }
    }
    Function [ <internal:SDL> function sdl_freewav ] {
    }
    Function [ <internal:SDL> function sdl_buildaudiocvt ] {
    }
    Function [ <internal:SDL> function sdl_convertaudio ] {
    }
    Function [ <internal:SDL> function sdl_mixaudio ] {
    }
    Function [ <internal:SDL> function sdl_lockaudio ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_unlockaudio ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_closeaudio ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_geterror ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:SDL> function sdl_expose_internal_errors ] {

      - Parameters [1] {
        Parameter #0 [ <required> $expose ]
      }
    }
  }
}


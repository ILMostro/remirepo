Extension [ <persistent> extension #138 rdkafka version 0.0.2 ] {

  - Constants [43] {
    Constant [ integer RD_KAFKA_CONSUMER ] { 1 }
    Constant [ integer RD_KAFKA_OFFSET_BEGINNING ] { -2 }
    Constant [ integer RD_KAFKA_OFFSET_END ] { -1 }
    Constant [ integer RD_KAFKA_OFFSET_STORED ] { -1000 }
    Constant [ integer RD_KAFKA_PARTITION_UA ] { -1 }
    Constant [ integer RD_KAFKA_PRODUCER ] { 0 }
    Constant [ integer RD_KAFKA_VERSION ] { 525824 }
    Constant [ integer RD_KAFKA_RESP_ERR__BEGIN ] { -200 }
    Constant [ integer RD_KAFKA_RESP_ERR__BAD_MSG ] { -199 }
    Constant [ integer RD_KAFKA_RESP_ERR__BAD_COMPRESSION ] { -198 }
    Constant [ integer RD_KAFKA_RESP_ERR__DESTROY ] { -197 }
    Constant [ integer RD_KAFKA_RESP_ERR__FAIL ] { -196 }
    Constant [ integer RD_KAFKA_RESP_ERR__TRANSPORT ] { -195 }
    Constant [ integer RD_KAFKA_RESP_ERR__CRIT_SYS_RESOURCE ] { -194 }
    Constant [ integer RD_KAFKA_RESP_ERR__RESOLVE ] { -193 }
    Constant [ integer RD_KAFKA_RESP_ERR__MSG_TIMED_OUT ] { -192 }
    Constant [ integer RD_KAFKA_RESP_ERR__PARTITION_EOF ] { -191 }
    Constant [ integer RD_KAFKA_RESP_ERR__UNKNOWN_PARTITION ] { -190 }
    Constant [ integer RD_KAFKA_RESP_ERR__FS ] { -189 }
    Constant [ integer RD_KAFKA_RESP_ERR__UNKNOWN_TOPIC ] { -188 }
    Constant [ integer RD_KAFKA_RESP_ERR__ALL_BROKERS_DOWN ] { -187 }
    Constant [ integer RD_KAFKA_RESP_ERR__INVALID_ARG ] { -186 }
    Constant [ integer RD_KAFKA_RESP_ERR__TIMED_OUT ] { -185 }
    Constant [ integer RD_KAFKA_RESP_ERR__QUEUE_FULL ] { -184 }
    Constant [ integer RD_KAFKA_RESP_ERR__ISR_INSUFF ] { -183 }
    Constant [ integer RD_KAFKA_RESP_ERR__END ] { -100 }
    Constant [ integer RD_KAFKA_RESP_ERR_UNKNOWN ] { -1 }
    Constant [ integer RD_KAFKA_RESP_ERR_NO_ERROR ] { 0 }
    Constant [ integer RD_KAFKA_RESP_ERR_OFFSET_OUT_OF_RANGE ] { 1 }
    Constant [ integer RD_KAFKA_RESP_ERR_INVALID_MSG ] { 2 }
    Constant [ integer RD_KAFKA_RESP_ERR_UNKNOWN_TOPIC_OR_PART ] { 3 }
    Constant [ integer RD_KAFKA_RESP_ERR_INVALID_MSG_SIZE ] { 4 }
    Constant [ integer RD_KAFKA_RESP_ERR_LEADER_NOT_AVAILABLE ] { 5 }
    Constant [ integer RD_KAFKA_RESP_ERR_NOT_LEADER_FOR_PARTITION ] { 6 }
    Constant [ integer RD_KAFKA_RESP_ERR_REQUEST_TIMED_OUT ] { 7 }
    Constant [ integer RD_KAFKA_RESP_ERR_BROKER_NOT_AVAILABLE ] { 8 }
    Constant [ integer RD_KAFKA_RESP_ERR_REPLICA_NOT_AVAILABLE ] { 9 }
    Constant [ integer RD_KAFKA_RESP_ERR_MSG_SIZE_TOO_LARGE ] { 10 }
    Constant [ integer RD_KAFKA_RESP_ERR_STALE_CTRL_EPOCH ] { 11 }
    Constant [ integer RD_KAFKA_RESP_ERR_OFFSET_METADATA_TOO_LARGE ] { 12 }
    Constant [ integer RD_KAFKA_CONF_UNKNOWN ] { -2 }
    Constant [ integer RD_KAFKA_CONF_INVALID ] { -1 }
    Constant [ integer RD_KAFKA_CONF_OK ] { 0 }
  }

  - Functions {
    Function [ <internal:rdkafka> function rd_kafka_err2str ] {

      - Parameters [1] {
        Parameter #0 [ <required> $err ]
      }
    }
    Function [ <internal:rdkafka> function rd_kafka_errno2err ] {

      - Parameters [1] {
        Parameter #0 [ <required> $errnox ]
      }
    }
    Function [ <internal:rdkafka> function rd_kafka_errno ] {

      - Parameters [1] {
        Parameter #0 [ <optional> $errnox ]
      }
    }
    Function [ <internal:rdkafka> function rd_kafka_offset_tail ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:rdkafka> function rd_kafka_thread_cnt ] {

      - Parameters [0] {
      }
    }
  }

  - Classes [16] {
    Class [ <internal:rdkafka> abstract class RdKafka ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [7] {
        Method [ <internal:rdkafka> public method addBrokers ] {

          - Parameters [1] {
            Parameter #0 [ <required> $broker_list ]
          }
        }

        Method [ <internal:rdkafka> public method metadata ] {

          - Parameters [3] {
            Parameter #0 [ <required> $all_topics ]
            Parameter #1 [ <optional> $only_topic ]
            Parameter #2 [ <optional> $timeout_ms ]
          }
        }

        Method [ <internal:rdkafka> public method setLogLevel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $level ]
          }
        }

        Method [ <internal:rdkafka> public method newQueue ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method newTopic ] {

          - Parameters [2] {
            Parameter #0 [ <required> $topic_name ]
            Parameter #1 [ <optional> $topic_conf ]
          }
        }

        Method [ <internal:rdkafka> public method outqLen ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method poll ] {

          - Parameters [1] {
            Parameter #0 [ <required> $timeout_ms ]
          }
        }
      }
    }

    Class [ <internal:rdkafka> class RdKafka\Consumer extends RdKafka ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [8] {
        Method [ <internal:rdkafka, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $conf ]
            Parameter #1 [ <optional> &$errstr ]
          }
        }

        Method [ <internal:rdkafka, inherits RdKafka> public method addBrokers ] {

          - Parameters [1] {
            Parameter #0 [ <required> $broker_list ]
          }
        }

        Method [ <internal:rdkafka, inherits RdKafka> public method metadata ] {

          - Parameters [3] {
            Parameter #0 [ <required> $all_topics ]
            Parameter #1 [ <optional> $only_topic ]
            Parameter #2 [ <optional> $timeout_ms ]
          }
        }

        Method [ <internal:rdkafka, inherits RdKafka> public method setLogLevel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $level ]
          }
        }

        Method [ <internal:rdkafka, inherits RdKafka> public method newQueue ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka, inherits RdKafka> public method newTopic ] {

          - Parameters [2] {
            Parameter #0 [ <required> $topic_name ]
            Parameter #1 [ <optional> $topic_conf ]
          }
        }

        Method [ <internal:rdkafka, inherits RdKafka> public method outqLen ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka, inherits RdKafka> public method poll ] {

          - Parameters [1] {
            Parameter #0 [ <required> $timeout_ms ]
          }
        }
      }
    }

    Class [ <internal:rdkafka> class RdKafka\Producer extends RdKafka ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [8] {
        Method [ <internal:rdkafka, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $conf ]
            Parameter #1 [ <optional> &$errstr ]
          }
        }

        Method [ <internal:rdkafka, inherits RdKafka> public method addBrokers ] {

          - Parameters [1] {
            Parameter #0 [ <required> $broker_list ]
          }
        }

        Method [ <internal:rdkafka, inherits RdKafka> public method metadata ] {

          - Parameters [3] {
            Parameter #0 [ <required> $all_topics ]
            Parameter #1 [ <optional> $only_topic ]
            Parameter #2 [ <optional> $timeout_ms ]
          }
        }

        Method [ <internal:rdkafka, inherits RdKafka> public method setLogLevel ] {

          - Parameters [1] {
            Parameter #0 [ <required> $level ]
          }
        }

        Method [ <internal:rdkafka, inherits RdKafka> public method newQueue ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka, inherits RdKafka> public method newTopic ] {

          - Parameters [2] {
            Parameter #0 [ <required> $topic_name ]
            Parameter #1 [ <optional> $topic_conf ]
          }
        }

        Method [ <internal:rdkafka, inherits RdKafka> public method outqLen ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka, inherits RdKafka> public method poll ] {

          - Parameters [1] {
            Parameter #0 [ <required> $timeout_ms ]
          }
        }
      }
    }

    Class [ <internal:rdkafka> class RdKafka\Conf ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [3] {
        Method [ <internal:rdkafka, ctor> public method __construct ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method dump ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method set ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:rdkafka> class RdKafka\TopicConf ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [3] {
        Method [ <internal:rdkafka, ctor> public method __construct ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method dump ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method set ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:rdkafka> abstract class RdKafka\Topic ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:rdkafka> class RdKafka\ConsumerTopic extends RdKafka\Topic ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [5] {
        Method [ <internal:rdkafka, ctor> private method __construct ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method consumeQueueStart ] {

          - Parameters [3] {
            Parameter #0 [ <required> $partition ]
            Parameter #1 [ <required> $offset ]
            Parameter #2 [ <required> $queue ]
          }
        }

        Method [ <internal:rdkafka> public method consumeStart ] {

          - Parameters [2] {
            Parameter #0 [ <required> $partition ]
            Parameter #1 [ <required> $offset ]
          }
        }

        Method [ <internal:rdkafka> public method consumeStop ] {

          - Parameters [1] {
            Parameter #0 [ <required> $partition ]
          }
        }

        Method [ <internal:rdkafka> public method consume ] {

          - Parameters [2] {
            Parameter #0 [ <required> $partition ]
            Parameter #1 [ <required> $timeout_ms ]
          }
        }
      }
    }

    Class [ <internal:rdkafka> class RdKafka\ProducerTopic extends RdKafka\Topic ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [2] {
        Method [ <internal:rdkafka, ctor> private method __construct ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method produce ] {

          - Parameters [4] {
            Parameter #0 [ <required> $partition ]
            Parameter #1 [ <required> $msgflags ]
            Parameter #2 [ <required> $payload ]
            Parameter #3 [ <optional> $key ]
          }
        }
      }
    }

    Class [ <internal:rdkafka> class RdKafka\Message ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [6] {
        Property [ <default> public $err ]
        Property [ <default> public $topic_name ]
        Property [ <default> public $partition ]
        Property [ <default> public $payload ]
        Property [ <default> public $key ]
        Property [ <default> public $offset ]
      }

      - Methods [1] {
        Method [ <internal:rdkafka> public method errstr ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:rdkafka> class RdKafka\Queue ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [2] {
        Method [ <internal:rdkafka, ctor> private method __construct ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method consume ] {

          - Parameters [1] {
            Parameter #0 [ <required> $timeout_ms ]
          }
        }
      }
    }

    Class [ <internal:rdkafka> class RdKafka\Exception extends Exception ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [9] {
        Method [ <internal:Core, inherits Exception, ctor> <visibility error> method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception> public method __toString ] {
        }
      }
    }

    Class [ <internal:rdkafka> class RdKafka\Metadata ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [4] {
        Method [ <internal:rdkafka> public method getOrigBrokerId ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method getOrigBrokerName ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method getBrokers ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method getTopics ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:rdkafka> class RdKafka\Metadata\Topic ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [3] {
        Method [ <internal:rdkafka> public method getTopic ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method getPartitions ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method getErr ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:rdkafka> class RdKafka\Metadata\Broker ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [3] {
        Method [ <internal:rdkafka> public method getId ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method getHost ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method getPort ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:rdkafka> class RdKafka\Metadata\Partition ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [5] {
        Method [ <internal:rdkafka> public method getId ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method getErr ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method getLeader ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method getReplicas ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka> public method getIsrs ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:rdkafka> <iterateable> class RdKafka\Metadata\Collection implements Countable, Iterator, Traversable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [6] {
        Method [ <internal:rdkafka, prototype Countable> public method count ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka, prototype Iterator> public method current ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka, prototype Iterator> public method key ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka, prototype Iterator> public method next ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka, prototype Iterator> public method rewind ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:rdkafka, prototype Iterator> public method valid ] {

          - Parameters [0] {
          }
        }
      }
    }
  }
}


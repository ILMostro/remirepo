Extension [ <persistent> extension #168 riak version 1.2.0 ] {

  - INI {
    Entry [ riak.persistent.connections <ALL> ]
      Current = '20'
    }
    Entry [ riak.persistent.timeout <ALL> ]
      Current = '1800'
    }
    Entry [ riak.socket.keep_alive <ALL> ]
      Current = '1'
    }
    Entry [ riak.socket.recv_timeout <ALL> ]
      Current = '10000'
    }
    Entry [ riak.socket.send_timeout <ALL> ]
      Current = '10000'
    }
    Entry [ riak.default.retries <ALL> ]
      Current = '1'
    }
  }

  - Classes [59] {
    Class [ <internal:riak> class Riak\Connection ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> private $host ]
        Property [ <default> private $port ]
      }

      - Methods [6] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $host ]
            Parameter #1 [ <optional> $port ]
          }
        }

        Method [ <internal:riak> public method ping ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getHost ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getPort ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getBucket ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:riak> public method getServerInfo ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Object ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [13] {
        Property [ <default> private $key ]
        Property [ <default> private $vtag ]
        Property [ <default> private $vClock ]
        Property [ <default> private $contentEncoding ]
        Property [ <default> private $charset ]
        Property [ <default> private $contentType ]
        Property [ <default> private $content ]
        Property [ <default> private $isDeleted ]
        Property [ <default> private $lastModified ]
        Property [ <default> private $lastModifiedUSecs ]
        Property [ <default> private $metadata ]
        Property [ <default> private $indexes ]
        Property [ <default> private $links ]
      }

      - Methods [23] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $key ]
          }
        }

        Method [ <internal:riak> public method getKey ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setKey ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:riak> public method getContent ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setContent ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method addIndex ] {

          - Parameters [2] {
            Parameter #0 [ <required> $index_name ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:riak> public method addLink ] {

          - Parameters [1] {
            Parameter #0 [ <required> $link ]
          }
        }

        Method [ <internal:riak> public method addMetadata ] {

          - Parameters [2] {
            Parameter #0 [ <required> $metadata_name ]
            Parameter #1 [ <optional> $value ]
          }
        }

        Method [ <internal:riak> public method setCharset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $charset ]
          }
        }

        Method [ <internal:riak> public method getCharset ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setContentType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $content_type ]
          }
        }

        Method [ <internal:riak> public method getContentType ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setContentEncoding ] {

          - Parameters [1] {
            Parameter #0 [ <required> $content_encoding ]
          }
        }

        Method [ <internal:riak> public method getContentEncoding ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getVTag ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method isDeleted ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getIndexMap ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getMetadataMap ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getLinkList ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getVClock ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setVClock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $vclock ]
          }
        }

        Method [ <internal:riak> public method getLastModifiedUSecs ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getLastModified ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Link ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> private $tag ]
        Property [ <default> private $bucket ]
        Property [ <default> private $key ]
      }

      - Methods [4] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <required> $tag ]
            Parameter #1 [ <required> $bucket ]
            Parameter #2 [ <required> $key ]
          }
        }

        Method [ <internal:riak> public method getTag ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getBucketName ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getKey ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Bucket ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $name ]
        Property [ <default> protected $connection ]
        Property [ <default> protected $conflictResolver ]
      }

      - Methods [15] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $client ]
            Parameter #1 [ <required> $name ]
          }
        }

        Method [ <internal:riak> public method put ] {

          - Parameters [2] {
            Parameter #0 [ <required> $object ]
            Parameter #1 [ <optional> $putInput ]
          }
        }

        Method [ <internal:riak> public method get ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <optional> $getInput ]
          }
        }

        Method [ <internal:riak> public method delete ] {

          - Parameters [2] {
            Parameter #0 [ <required> $object ]
            Parameter #1 [ <optional> $delInput ]
          }
        }

        Method [ <internal:riak> public method index ] {

          - Parameters [3] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $from ]
            Parameter #2 [ <optional> $to ]
          }
        }

        Method [ <internal:riak> public method indexQuery ] {

          - Parameters [2] {
            Parameter #0 [ <required> $query ]
            Parameter #1 [ <optional> $input ]
          }
        }

        Method [ <internal:riak> public method counter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:riak> public method getPropertyList ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setPropertyList ] {

          - Parameters [1] {
            Parameter #0 [ <required> $bucket_properties ]
          }
        }

        Method [ <internal:riak> public method getConflictResolver ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setConflictResolver ] {

          - Parameters [1] {
            Parameter #0 [ <required> Riak\Output\ConflictResolver $resolver ]
          }
        }

        Method [ <internal:riak> public method getKeyStream ] {

          - Parameters [1] {
            Parameter #0 [ <required> $keystreamer ]
          }
        }

        Method [ <internal:riak> public method getKeyList ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getName ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getConnection ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\BucketPropertyList ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [22] {
        Property [ <default> private $nVal ]
        Property [ <default> private $allowMult ]
        Property [ <default> private $lastWriteWins ]
        Property [ <default> private $oldVClock ]
        Property [ <default> private $youngVClock ]
        Property [ <default> private $smallVClock ]
        Property [ <default> private $bigVClock ]
        Property [ <default> private $r ]
        Property [ <default> private $pr ]
        Property [ <default> private $w ]
        Property [ <default> private $dw ]
        Property [ <default> private $pw ]
        Property [ <default> private $rw ]
        Property [ <default> private $basicQuorum ]
        Property [ <default> private $notFoundOk ]
        Property [ <default> private $searchEnabled ]
        Property [ <default> private $backend ]
        Property [ <default> private $preCommitHooks ]
        Property [ <default> private $postCommitHooks ]
        Property [ <default> private $chashKeyFun ]
        Property [ <default> private $linkFun ]
        Property [ <default> private $replicationMode ]
      }

      - Methods [45] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $nVal ]
            Parameter #1 [ <optional> $allowMult ]
          }
        }

        Method [ <internal:riak> public method getNValue ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setNValue ] {

          - Parameters [1] {
            Parameter #0 [ <required> $nVal ]
          }
        }

        Method [ <internal:riak> public method getAllowMult ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setAllowMult ] {

          - Parameters [1] {
            Parameter #0 [ <required> $allowMult ]
          }
        }

        Method [ <internal:riak> public method getLastWriteWins ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setLastWriteWins ] {

          - Parameters [1] {
            Parameter #0 [ <required> $lastWriteWins ]
          }
        }

        Method [ <internal:riak> public method getOldVClock ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setOldVClock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $vClockValue ]
          }
        }

        Method [ <internal:riak> public method getYoungVClock ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setYoungVClock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $vClockValue ]
          }
        }

        Method [ <internal:riak> public method getSmallVClock ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setSmallVClock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $vClockValue ]
          }
        }

        Method [ <internal:riak> public method getBigVClock ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setBigVClock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $vClockValue ]
          }
        }

        Method [ <internal:riak> public method getR ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setR ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method getPR ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setPR ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method getW ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setW ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method getDW ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setDW ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method getPW ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setPW ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method getRW ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setRW ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method getBasicQuorum ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setBasicQuorum ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method getNotFoundOk ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setNotFoundOk ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method getSearchEnabled ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setSearchEnabled ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method getBackend ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setBackend ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method getPreCommitHookList ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setPreCommitHookList ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method getPostCommitHookList ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setPostCommitHookList ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method getCHashKeyFun ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setCHashKeyFun ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method getLinkFun ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setLinkFun ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method getReplicationMode ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setReplicationMode ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Property\ModuleFunction ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> private $module ]
        Property [ <default> private $function ]
      }

      - Methods [5] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $module ]
            Parameter #1 [ <required> $function ]
          }
        }

        Method [ <internal:riak> public method getModule ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setModule ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method getFunction ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setFunction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Property\CommitHook ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> private $moduleOrName ]
        Property [ <default> private $function ]
      }

      - Methods [6] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $moduleOrName ]
            Parameter #1 [ <optional> $function ]
          }
        }

        Method [ <internal:riak> public method getJsName ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getErlModule ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getErlFunction ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method isJavascript ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method isErlang ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> <iterateable> class Riak\Property\CommitHookList implements ArrayAccess, IteratorAggregate, Traversable, Countable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> private $hooks ]
      }

      - Methods [7] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:riak, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:riak, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $offset ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:riak, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:riak, prototype Countable> public method count ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, prototype IteratorAggregate> public method getIterator ] {

          - Parameters [0] {
          }
        }
      }
    }

    Interface [ <internal:riak> interface Riak\Property\ReplicationMode\ReplicationMode ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:riak> class Riak\Property\ReplicationMode\FullSyncOnly implements Riak\Property\ReplicationMode\ReplicationMode ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:riak> class Riak\Property\ReplicationMode\Disabled implements Riak\Property\ReplicationMode\ReplicationMode ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:riak> class Riak\Property\ReplicationMode\RealTimeAndFullSync implements Riak\Property\ReplicationMode\ReplicationMode ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:riak> class Riak\Property\ReplicationMode\RealTimeOnly implements Riak\Property\ReplicationMode\ReplicationMode ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:riak> class Riak\MapReduce\MapReduce ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> private $phases ]
        Property [ <default> private $connection ]
        Property [ <default> private $input ]
      }

      - Methods [6] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $connection ]
          }
        }

        Method [ <internal:riak> public method addPhase ] {

          - Parameters [1] {
            Parameter #0 [ <required> $phase ]
          }
        }

        Method [ <internal:riak> public method setInput ] {

          - Parameters [1] {
            Parameter #0 [ <required> $input ]
          }
        }

        Method [ <internal:riak> public method toArray ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $decode ]
          }
        }

        Method [ <internal:riak> public method toJson ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $decode ]
          }
        }

        Method [ <internal:riak> public method run ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $decode ]
          }
        }
      }
    }

    Class [ <internal:riak> abstract class Riak\MapReduce\Phase\Phase ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $function ]
        Property [ <default> protected $keep ]
        Property [ <default> protected $arg ]
      }

      - Methods [1] {
        Method [ <internal:riak> abstract public method toArray ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\MapReduce\Phase\MapPhase extends Riak\MapReduce\Phase\Phase ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $function ]
        Property [ <default> protected $keep ]
        Property [ <default> protected $arg ]
      }

      - Methods [2] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <required> $function ]
            Parameter #1 [ <optional> $keep ]
            Parameter #2 [ <optional> $args ]
          }
        }

        Method [ <internal:riak, overwrites Riak\MapReduce\Phase\Phase, prototype Riak\MapReduce\Phase\Phase> public method toArray ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\MapReduce\Phase\ReducePhase extends Riak\MapReduce\Phase\Phase ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $function ]
        Property [ <default> protected $keep ]
        Property [ <default> protected $arg ]
      }

      - Methods [2] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <required> $function ]
            Parameter #1 [ <optional> $keep ]
            Parameter #2 [ <optional> $args ]
          }
        }

        Method [ <internal:riak, overwrites Riak\MapReduce\Phase\Phase, prototype Riak\MapReduce\Phase\Phase> public method toArray ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> abstract class Riak\MapReduce\Input\Input ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:riak> abstract public method getValue ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\MapReduce\Input\BucketInput extends Riak\MapReduce\Input\Input ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $name ]
        Property [ <default> public $keyFilters ]
        Property [ <default> protected $idxname ]
        Property [ <default> protected $idxstart ]
        Property [ <default> protected $idxend ]
      }

      - Methods [3] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:riak> public method setIndexFilter ] {

          - Parameters [3] {
            Parameter #0 [ <required> $name ]
            Parameter #1 [ <required> $start ]
            Parameter #2 [ <optional> $end ]
          }
        }

        Method [ <internal:riak, overwrites Riak\MapReduce\Input\Input, prototype Riak\MapReduce\Input\Input> public method getValue ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\MapReduce\Input\KeyDataListInput extends Riak\MapReduce\Input\Input ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $inputList ]
      }

      - Methods [3] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:riak> public method add ] {

          - Parameters [3] {
            Parameter #0 [ <required> $bucket ]
            Parameter #1 [ <required> $key ]
            Parameter #2 [ <required> $data ]
          }
        }

        Method [ <internal:riak, overwrites Riak\MapReduce\Input\Input, prototype Riak\MapReduce\Input\Input> public method getValue ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\MapReduce\Input\KeyListInput extends Riak\MapReduce\Input\Input ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $inputList ]
      }

      - Methods [4] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $bucketkeys_arr ]
          }
        }

        Method [ <internal:riak> public method addArray ] {

          - Parameters [1] {
            Parameter #0 [ <required> $bucketkeys_arr ]
          }
        }

        Method [ <internal:riak> public method addSingle ] {

          - Parameters [2] {
            Parameter #0 [ <required> $bucket ]
            Parameter #1 [ <required> $key ]
          }
        }

        Method [ <internal:riak, overwrites Riak\MapReduce\Input\Input, prototype Riak\MapReduce\Input\Input> public method getValue ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\MapReduce\Output\Output ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> private $value ]
        Property [ <default> private $phase ]
      }

      - Methods [3] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $value ]
            Parameter #1 [ <optional> &$phase ]
          }
        }

        Method [ <internal:riak> public method getValue ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getPhaseNumber ] {

          - Parameters [0] {
          }
        }
      }
    }

    Interface [ <internal:riak> interface Riak\MapReduce\Output\StreamOutput ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:riak> abstract public method receive ] {

          - Parameters [1] {
            Parameter #0 [ <required> $result ]
          }
        }
      }
    }

    Class [ <internal:riak> abstract class Riak\MapReduce\Functions\BaseFunction ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:riak> abstract public method toArray ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\MapReduce\Functions\ErlangFunction extends Riak\MapReduce\Functions\BaseFunction ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $module ]
        Property [ <default> protected $function ]
      }

      - Methods [2] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $module ]
            Parameter #1 [ <required> $function ]
          }
        }

        Method [ <internal:riak, overwrites Riak\MapReduce\Functions\BaseFunction, prototype Riak\MapReduce\Functions\BaseFunction> public method toArray ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\MapReduce\Functions\JavascriptFunction extends Riak\MapReduce\Functions\BaseFunction ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [2] {
        Method [ <internal:riak> static public method anon ] {

          - Parameters [1] {
            Parameter #0 [ <required> $source ]
          }
        }

        Method [ <internal:riak> static public method named ] {

          - Parameters [1] {
            Parameter #0 [ <required> $source ]
          }
        }
      }

      - Properties [2] {
        Property [ <default> protected $named ]
        Property [ <default> protected $source ]
      }

      - Methods [2] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $named ]
            Parameter #1 [ <required> $source ]
          }
        }

        Method [ <internal:riak, overwrites Riak\MapReduce\Functions\BaseFunction, prototype Riak\MapReduce\Functions\BaseFunction> public method toArray ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Input\Input ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:riak> class Riak\Input\DeleteInput extends Riak\Input\Input ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [7] {
        Property [ <default> protected $r ]
        Property [ <default> protected $rw ]
        Property [ <default> protected $pr ]
        Property [ <default> protected $w ]
        Property [ <default> protected $dw ]
        Property [ <default> protected $pw ]
        Property [ <default> protected $vClock ]
      }

      - Methods [14] {
        Method [ <internal:riak> public method setR ] {

          - Parameters [1] {
            Parameter #0 [ <required> $r ]
          }
        }

        Method [ <internal:riak> public method getR ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setPR ] {

          - Parameters [1] {
            Parameter #0 [ <required> $pr ]
          }
        }

        Method [ <internal:riak> public method getPR ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setRW ] {

          - Parameters [1] {
            Parameter #0 [ <required> $rw ]
          }
        }

        Method [ <internal:riak> public method getRW ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setW ] {

          - Parameters [1] {
            Parameter #0 [ <required> $w ]
          }
        }

        Method [ <internal:riak> public method getW ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setDW ] {

          - Parameters [1] {
            Parameter #0 [ <required> $dw ]
          }
        }

        Method [ <internal:riak> public method getDW ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setPW ] {

          - Parameters [1] {
            Parameter #0 [ <required> $pw ]
          }
        }

        Method [ <internal:riak> public method getPW ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setVClock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $vclock ]
          }
        }

        Method [ <internal:riak> public method getVClock ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Input\GetInput extends Riak\Input\Input ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [7] {
        Property [ <default> protected $r ]
        Property [ <default> protected $pr ]
        Property [ <default> protected $basicQuorum ]
        Property [ <default> protected $notFoundOk ]
        Property [ <default> protected $ifModifiedVClock ]
        Property [ <default> protected $returnHead ]
        Property [ <default> protected $deletedVClock ]
      }

      - Methods [14] {
        Method [ <internal:riak> public method setReturnHead ] {

          - Parameters [1] {
            Parameter #0 [ <required> $return_head ]
          }
        }

        Method [ <internal:riak> public method getReturnHead ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setR ] {

          - Parameters [1] {
            Parameter #0 [ <required> $r ]
          }
        }

        Method [ <internal:riak> public method getR ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setPR ] {

          - Parameters [1] {
            Parameter #0 [ <required> $pr ]
          }
        }

        Method [ <internal:riak> public method getPR ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setBasicQuorum ] {

          - Parameters [1] {
            Parameter #0 [ <required> $basic_quorum ]
          }
        }

        Method [ <internal:riak> public method getBasicQuorum ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setNotFoundOk ] {

          - Parameters [1] {
            Parameter #0 [ <required> $not_found_ok ]
          }
        }

        Method [ <internal:riak> public method getNotFoundOk ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setIfModifiedVClock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $ifModified_vclock ]
          }
        }

        Method [ <internal:riak> public method getIfModifiedVClock ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setReturnDeletedVClock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $deleted_vclock ]
          }
        }

        Method [ <internal:riak> public method getReturnDeletedVClock ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Input\GetResolverInput extends Riak\Input\GetInput ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [8] {
        Property [ <default> protected $r ]
        Property [ <default> protected $pr ]
        Property [ <default> protected $basicQuorum ]
        Property [ <default> protected $notFoundOk ]
        Property [ <default> protected $ifModifiedVClock ]
        Property [ <default> protected $returnHead ]
        Property [ <default> protected $deletedVClock ]
        Property [ <default> protected $conflictResolver ]
      }

      - Methods [16] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> Riak\Output\ConflictResolver $resolver ]
          }
        }

        Method [ <internal:riak> public method getConflictResolver ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Input\GetInput> public method setReturnHead ] {

          - Parameters [1] {
            Parameter #0 [ <required> $return_head ]
          }
        }

        Method [ <internal:riak, inherits Riak\Input\GetInput> public method getReturnHead ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Input\GetInput> public method setR ] {

          - Parameters [1] {
            Parameter #0 [ <required> $r ]
          }
        }

        Method [ <internal:riak, inherits Riak\Input\GetInput> public method getR ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Input\GetInput> public method setPR ] {

          - Parameters [1] {
            Parameter #0 [ <required> $pr ]
          }
        }

        Method [ <internal:riak, inherits Riak\Input\GetInput> public method getPR ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Input\GetInput> public method setBasicQuorum ] {

          - Parameters [1] {
            Parameter #0 [ <required> $basic_quorum ]
          }
        }

        Method [ <internal:riak, inherits Riak\Input\GetInput> public method getBasicQuorum ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Input\GetInput> public method setNotFoundOk ] {

          - Parameters [1] {
            Parameter #0 [ <required> $not_found_ok ]
          }
        }

        Method [ <internal:riak, inherits Riak\Input\GetInput> public method getNotFoundOk ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Input\GetInput> public method setIfModifiedVClock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $ifModified_vclock ]
          }
        }

        Method [ <internal:riak, inherits Riak\Input\GetInput> public method getIfModifiedVClock ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Input\GetInput> public method setReturnDeletedVClock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $deleted_vclock ]
          }
        }

        Method [ <internal:riak, inherits Riak\Input\GetInput> public method getReturnDeletedVClock ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Input\PutInput extends Riak\Input\Input ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [8] {
        Property [ <default> protected $w ]
        Property [ <default> protected $dw ]
        Property [ <default> protected $pw ]
        Property [ <default> protected $vClock ]
        Property [ <default> protected $returnHead ]
        Property [ <default> protected $returnBody ]
        Property [ <default> protected $ifNoneMatch ]
        Property [ <default> protected $ifNotModified ]
      }

      - Methods [16] {
        Method [ <internal:riak> public method setReturnHead ] {

          - Parameters [1] {
            Parameter #0 [ <required> $return_head ]
          }
        }

        Method [ <internal:riak> public method getReturnHead ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setW ] {

          - Parameters [1] {
            Parameter #0 [ <required> $w ]
          }
        }

        Method [ <internal:riak> public method getW ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setDW ] {

          - Parameters [1] {
            Parameter #0 [ <required> $dw ]
          }
        }

        Method [ <internal:riak> public method getDW ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setPW ] {

          - Parameters [1] {
            Parameter #0 [ <required> $pw ]
          }
        }

        Method [ <internal:riak> public method getPW ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setVClock ] {

          - Parameters [1] {
            Parameter #0 [ <required> $vclock ]
          }
        }

        Method [ <internal:riak> public method getVClock ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setReturnBody ] {

          - Parameters [1] {
            Parameter #0 [ <required> $return_body ]
          }
        }

        Method [ <internal:riak> public method getReturnBody ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setIfNoneMatch ] {

          - Parameters [1] {
            Parameter #0 [ <required> $if_none_match ]
          }
        }

        Method [ <internal:riak> public method getIfNoneMatch ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setIfNotModified ] {

          - Parameters [1] {
            Parameter #0 [ <required> $if_not_modified ]
          }
        }

        Method [ <internal:riak> public method getIfNotModified ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Input\IndexInput extends Riak\Input\Input ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $continuation ]
        Property [ <default> protected $maxResults ]
      }

      - Methods [4] {
        Method [ <internal:riak> public method setContinuation ] {

          - Parameters [1] {
            Parameter #0 [ <required> $continuation ]
          }
        }

        Method [ <internal:riak> public method getContinuation ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setMaxResults ] {

          - Parameters [1] {
            Parameter #0 [ <required> $continuation ]
          }
        }

        Method [ <internal:riak> public method getMaxResults ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Query\IndexQuery ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> private $name ]
        Property [ <default> private $exactValue ]
        Property [ <default> private $minValue ]
        Property [ <default> private $maxValue ]
        Property [ <default> private $isRange ]
      }

      - Methods [8] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:riak> public method setName ] {

          - Parameters [1] {
            Parameter #0 [ <required> $name ]
          }
        }

        Method [ <internal:riak> public method getName ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setExactValue ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:riak> public method getExactValue ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setRangeValue ] {

          - Parameters [2] {
            Parameter #0 [ <required> $min ]
            Parameter #1 [ <optional> $max ]
          }
        }

        Method [ <internal:riak> public method getRangeValue ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method isRangeQuery ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Output\Output ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $vClock ]
        Property [ <default> protected $objectList ]
        Property [ <default> protected $key ]
        Property [ <default> protected $bucket ]
        Property [ <default> protected $conflictResolver ]
      }

      - Methods [7] {
        Method [ <internal:riak> public method getObjectList ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getVClock ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getKey ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method hasSiblings ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method hasObject ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getObject ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getFirstObject ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Output\GetOutput extends Riak\Output\Output ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [6] {
        Property [ <default> protected $vClock ]
        Property [ <default> protected $objectList ]
        Property [ <default> protected $key ]
        Property [ <default> protected $bucket ]
        Property [ <default> protected $conflictResolver ]
        Property [ <default> protected $unchanged ]
      }

      - Methods [8] {
        Method [ <internal:riak> public method isUnchanged ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Output\Output> public method getObjectList ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Output\Output> public method getVClock ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Output\Output> public method getKey ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Output\Output> public method hasSiblings ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Output\Output> public method hasObject ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Output\Output> public method getObject ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Output\Output> public method getFirstObject ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Output\PutOutput extends Riak\Output\Output ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $vClock ]
        Property [ <default> protected $objectList ]
        Property [ <default> protected $key ]
        Property [ <default> protected $bucket ]
        Property [ <default> protected $conflictResolver ]
      }

      - Methods [7] {
        Method [ <internal:riak, inherits Riak\Output\Output> public method getObjectList ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Output\Output> public method getVClock ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Output\Output> public method getKey ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Output\Output> public method hasSiblings ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Output\Output> public method hasObject ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Output\Output> public method getObject ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, inherits Riak\Output\Output> public method getFirstObject ] {

          - Parameters [0] {
          }
        }
      }
    }

    Interface [ <internal:riak> interface Riak\Output\KeyStreamOutput ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:riak> abstract public method process ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }
      }
    }

    Class [ <internal:riak> <iterateable> class Riak\ObjectList implements ArrayAccess, IteratorAggregate, Traversable, Countable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> private $objects ]
      }

      - Methods [10] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method first ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method last ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method isEmpty ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:riak, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:riak, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $offset ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:riak, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:riak, prototype Countable> public method count ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, prototype IteratorAggregate> public method getIterator ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Output\IndexResult ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $key ]
      }

      - Methods [2] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $key ]
          }
        }

        Method [ <internal:riak> public method getKey ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> <iterateable> class Riak\Output\IndexResultList implements ArrayAccess, IteratorAggregate, Traversable, Countable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $resultList ]
      }

      - Methods [7] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, prototype ArrayAccess> public method offsetExists ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:riak, prototype ArrayAccess> public method offsetGet ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:riak, prototype ArrayAccess> public method offsetSet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $offset ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:riak, prototype ArrayAccess> public method offsetUnset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $offset ]
          }
        }

        Method [ <internal:riak, prototype Countable> public method count ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak, prototype IteratorAggregate> public method getIterator ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Output\IndexOutput ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $result ]
        Property [ <default> protected $continuation ]
      }

      - Methods [3] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $indexOutput ]
            Parameter #1 [ <optional> $continuation ]
          }
        }

        Method [ <internal:riak> public method getContinuation ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getResultList ] {

          - Parameters [0] {
          }
        }
      }
    }

    Interface [ <internal:riak> interface Riak\Output\ConflictResolver ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:riak> abstract public method resolve ] {

          - Parameters [1] {
            Parameter #0 [ <required> Riak\ObjectList $objects ]
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Output\YoungestSiblingResolver implements Riak\Output\ConflictResolver ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:riak, prototype Riak\Output\ConflictResolver> public method resolve ] {

          - Parameters [1] {
            Parameter #0 [ <required> Riak\ObjectList $objects ]
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Exception\RiakException extends Exception ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [9] {
        Method [ <internal:Core, inherits Exception, ctor> <visibility error> method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception> public method __toString ] {
        }
      }
    }

    Class [ <internal:riak> class Riak\Exception\BadArgumentsException extends Riak\Exception\RiakException ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [9] {
        Method [ <internal:Core, inherits Exception, ctor> <visibility error> method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception> public method __toString ] {
        }
      }
    }

    Class [ <internal:riak> class Riak\Exception\ConnectionException extends Riak\Exception\RiakException ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [9] {
        Method [ <internal:Core, inherits Exception, ctor> <visibility error> method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception> public method __toString ] {
        }
      }
    }

    Class [ <internal:riak> class Riak\Exception\CommunicationException extends Riak\Exception\RiakException ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [9] {
        Method [ <internal:Core, inherits Exception, ctor> <visibility error> method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception> public method __toString ] {
        }
      }
    }

    Class [ <internal:riak> class Riak\Exception\UnexpectedResponseException extends Riak\Exception\RiakException ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [9] {
        Method [ <internal:Core, inherits Exception, ctor> <visibility error> method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception> public method __toString ] {
        }
      }
    }

    Class [ <internal:riak> class Riak\Exception\NonUniqueException extends Riak\Exception\RiakException ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [9] {
        Method [ <internal:Core, inherits Exception, ctor> <visibility error> method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception> public method __toString ] {
        }
      }
    }

    Class [ <internal:riak> class Riak\Exception\UnresolvedConflictException extends Riak\Exception\RiakException ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
      }

      - Methods [9] {
        Method [ <internal:Core, inherits Exception, ctor> <visibility error> method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception> public method __toString ] {
        }
      }
    }

    Class [ <internal:riak> class Riak\PoolInfo ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [3] {
        Method [ <internal:riak> static public method getNumActiveConnection ] {
        }

        Method [ <internal:riak> static public method getNumActivePersistentConnection ] {
        }

        Method [ <internal:riak> static public method getNumReconnect ] {
        }
      }

      - Properties [0] {
      }

      - Methods [0] {
      }
    }

    Class [ <internal:riak> class Riak\Search\Search ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> protected $connection ]
      }

      - Methods [2] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $client ]
          }
        }

        Method [ <internal:riak> public method search ] {

          - Parameters [3] {
            Parameter #0 [ <required> $index ]
            Parameter #1 [ <required> $query ]
            Parameter #2 [ <optional> $parameters ]
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Search\Input\ParameterBag ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [8] {
        Property [ <default> protected $rowLimit ]
        Property [ <default> protected $start ]
        Property [ <default> protected $sort ]
        Property [ <default> protected $filter ]
        Property [ <default> protected $defaultField ]
        Property [ <default> protected $defaultOperation ]
        Property [ <default> protected $presort ]
        Property [ <default> protected $fieldLimits ]
      }

      - Methods [16] {
        Method [ <internal:riak, ctor> public method setRowLimit ] {

          - Parameters [1] {
            Parameter #0 [ <required> $rowlimit ]
          }
        }

        Method [ <internal:riak> public method getRowLimit ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setStartOffset ] {

          - Parameters [1] {
            Parameter #0 [ <required> $start ]
          }
        }

        Method [ <internal:riak> public method getStartOffset ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setSort ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sort ]
          }
        }

        Method [ <internal:riak> public method getSort ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setFilter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sort ]
          }
        }

        Method [ <internal:riak> public method getFilter ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setDefaultField ] {

          - Parameters [1] {
            Parameter #0 [ <required> $defaultfield ]
          }
        }

        Method [ <internal:riak> public method getDefaultField ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setDefaultOperation ] {

          - Parameters [1] {
            Parameter #0 [ <required> $defaultop ]
          }
        }

        Method [ <internal:riak> public method getDefaultOperation ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setPresort ] {

          - Parameters [1] {
            Parameter #0 [ <required> $presort ]
          }
        }

        Method [ <internal:riak> public method getPresort ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setFieldLimits ] {

          - Parameters [1] {
            Parameter #0 [ <required> $fieldlimit ]
          }
        }

        Method [ <internal:riak> public method getFieldLimits ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Search\Output\Output ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> private $maxScore ]
        Property [ <default> private $numFound ]
        Property [ <default> private $documents ]
      }

      - Methods [5] {
        Method [ <internal:riak> public method hasMaxScore ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getMaxScore ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method hasNumFound ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getNumFound ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getDocuments ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Search\Output\DocumentOutput ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> private $fields ]
      }

      - Methods [1] {
        Method [ <internal:riak> public method getFields ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Crdt\Counter ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> protected $bucket ]
        Property [ <default> protected $key ]
      }

      - Methods [4] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $bucket ]
            Parameter #1 [ <required> $key ]
          }
        }

        Method [ <internal:riak> public method increment ] {

          - Parameters [2] {
            Parameter #0 [ <required> $amount ]
            Parameter #1 [ <optional> $updateInput ]
          }
        }

        Method [ <internal:riak> public method incrementAndGet ] {

          - Parameters [2] {
            Parameter #0 [ <required> $amount ]
            Parameter #1 [ <optional> $updateInput ]
          }
        }

        Method [ <internal:riak> public method get ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $getInput ]
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Crdt\Input\GetInput ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [4] {
        Property [ <default> protected $r ]
        Property [ <default> protected $pr ]
        Property [ <default> protected $basicQuorum ]
        Property [ <default> protected $notFoundOk ]
      }

      - Methods [8] {
        Method [ <internal:riak> public method setR ] {

          - Parameters [1] {
            Parameter #0 [ <required> $r ]
          }
        }

        Method [ <internal:riak> public method getR ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setPR ] {

          - Parameters [1] {
            Parameter #0 [ <required> $pr ]
          }
        }

        Method [ <internal:riak> public method getPR ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setBasicQuorum ] {

          - Parameters [1] {
            Parameter #0 [ <required> $basicQuorum ]
          }
        }

        Method [ <internal:riak> public method getBasicQuorum ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setNotFoundOk ] {

          - Parameters [1] {
            Parameter #0 [ <required> $notFoundOk ]
          }
        }

        Method [ <internal:riak> public method getNotFoundOk ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\Crdt\Input\UpdateInput ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> protected $w ]
        Property [ <default> protected $dw ]
        Property [ <default> protected $pw ]
      }

      - Methods [6] {
        Method [ <internal:riak> public method setW ] {

          - Parameters [1] {
            Parameter #0 [ <required> $w ]
          }
        }

        Method [ <internal:riak> public method getW ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setDW ] {

          - Parameters [1] {
            Parameter #0 [ <required> $dw ]
          }
        }

        Method [ <internal:riak> public method getDW ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method setPW ] {

          - Parameters [1] {
            Parameter #0 [ <required> $pw ]
          }
        }

        Method [ <internal:riak> public method getPW ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:riak> class Riak\ServerInfo ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> private $connection ]
      }

      - Methods [3] {
        Method [ <internal:riak, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <required> $connection ]
          }
        }

        Method [ <internal:riak> public method getNode ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:riak> public method getServerVersion ] {

          - Parameters [0] {
          }
        }
      }
    }
  }
}


Extension [ <persistent> extension #96 geospatial version 0.1.0 ] {

  - Constants [4] {
    Constant [ double GEO_DEG_TO_RAD ] { 0.017453292519943 }
    Constant [ double GEO_EARTH_RADIUS ] { 6378137 }
    Constant [ integer GEO_AIRY_1830 ] { 2 }
    Constant [ integer GEO_WGS84 ] { 1 }
  }

  - Functions {
    Function [ <internal:geospatial> function haversine ] {

      - Parameters [3] {
        Parameter #0 [ <required> $geoJsonPointFrom ]
        Parameter #1 [ <required> $geoJsonPointTo ]
        Parameter #2 [ <optional> $radius ]
      }
    }
    Function [ <internal:geospatial> function initial_bearing ] {

      - Parameters [3] {
        Parameter #0 [ <required> $geoJsonPointFrom ]
        Parameter #1 [ <required> $geoJsonPointTo ]
        Parameter #2 [ <optional> $radius ]
      }
    }
    Function [ <internal:geospatial> function fraction_along_gc_line ] {

      - Parameters [4] {
        Parameter #0 [ <required> $geoJsonPointFrom ]
        Parameter #1 [ <required> $geoJsonPointTo ]
        Parameter #2 [ <required> $fraction ]
        Parameter #3 [ <optional> $radius ]
      }
    }
    Function [ <internal:geospatial> function helmert ] {

      - Parameters [5] {
        Parameter #0 [ <required> $x ]
        Parameter #1 [ <required> $y ]
        Parameter #2 [ <required> $z ]
        Parameter #3 [ <optional> $from_reference_ellipsoid ]
        Parameter #4 [ <optional> $to_reference_ellipsoid ]
      }
    }
    Function [ <internal:geospatial> function polar_to_cartesian ] {

      - Parameters [3] {
        Parameter #0 [ <required> $latitude ]
        Parameter #1 [ <required> $longitude ]
        Parameter #2 [ <required> $reference_ellipsoid ]
      }
    }
    Function [ <internal:geospatial> function cartesian_to_polar ] {

      - Parameters [4] {
        Parameter #0 [ <required> $x ]
        Parameter #1 [ <required> $y ]
        Parameter #2 [ <required> $z ]
        Parameter #3 [ <required> $reference_ellipsoid ]
      }
    }
    Function [ <internal:geospatial> function transform_datum ] {

      - Parameters [4] {
        Parameter #0 [ <required> $latitude ]
        Parameter #1 [ <required> $longitude ]
        Parameter #2 [ <required> $from_reference_ellipsoid ]
        Parameter #3 [ <required> $to_reference_ellipsoid ]
      }
    }
    Function [ <internal:geospatial> function dms_to_decimal ] {

      - Parameters [4] {
        Parameter #0 [ <required> $degrees ]
        Parameter #1 [ <required> $minutes ]
        Parameter #2 [ <required> $seconds ]
        Parameter #3 [ <optional> $direction ]
      }
    }
    Function [ <internal:geospatial> function decimal_to_dms ] {

      - Parameters [2] {
        Parameter #0 [ <required> $decimal ]
        Parameter #1 [ <required> $coordinate ]
      }
    }
    Function [ <internal:geospatial> function vincenty ] {

      - Parameters [3] {
        Parameter #0 [ <required> $geoJsonPointFrom ]
        Parameter #1 [ <required> $geoJsonPointTo ]
        Parameter #2 [ <optional> $reference_ellipsoid ]
      }
    }
    Function [ <internal:geospatial> function rdp_simplify ] {

      - Parameters [2] {
        Parameter #0 [ <required> $pointsArray ]
        Parameter #1 [ <required> $epsilon ]
      }
    }
    Function [ <internal:geospatial> function interpolate_linestring ] {

      - Parameters [2] {
        Parameter #0 [ <required> $GeoJSONLineString ]
        Parameter #1 [ <required> $epsilon ]
      }
    }
    Function [ <internal:geospatial> function interpolate_polygon ] {

      - Parameters [2] {
        Parameter #0 [ <required> $GeoJSONPolygon ]
        Parameter #1 [ <required> $epsilon ]
      }
    }
  }
}

